/* parser generated by jison 0.4.18-180 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `parser.parse(str, ...)` and specified by way of `%parse-param ...` in the grammar file
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                             executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are passed verbatim to the grammar rules' action code.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy [, optional parse() args])
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy [, optional parse() args])
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `Parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */
var index = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




// helper: reconstruct the productions[] table
function bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for (var i = 0, l = p.length; i < l; i++) {
        rv.push([
            p[i],
            r[i]
        ]);
    }
    return rv;
}



// helper: reconstruct the defaultActions[] table
function bda(s) {
    var rv = {};
    var d = s.idx;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var j = d[i];
        rv[j] = g[i];
    }
    return rv;
}



// helper: reconstruct the 'goto' table
function bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var n = d[i];
        var q = {};
        for (var j = 0; j < n; j++) {
            var z = y.shift();
            switch (t.shift()) {
            case 2:
                q[z] = [
                    m.shift(),
                    g.shift()
                ];
                break;

            case 0:
                q[z] = a.shift();
                break;

            default:
                // type === 1: accept
                q[z] = [
                    3
                ];
            }
        }
        rv.push(q);
    }
    return rv;
}



// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function s(c, l, a) {
    a = a || 0;
    for (var i = 0; i < l; i++) {
        this.push(c);
        c += a;
    }
}

// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function c(i, l) {
    i = this.length - i;
    for (l += i; i < l; i++) {
        this.push(this[i]);
    }
}

// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function u(a) {
    var rv = [];
    for (var i = 0, l = a.length; i < l; i++) {
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else {
            rv.push(e);
        }
    }
    return rv;
}


var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   no default action: ............... false
    //   no try..catch: ................... false
    //   no default resolve on conflict:    false
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... js
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   all actions are default: ......... false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... true
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. true
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   has error recovery: .............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 20,
  "!=": 64,
  "!==": 66,
  "$accept": 0,
  "$end": 1,
  "%": 22,
  "%=": 71,
  "&&": 67,
  "&=": 77,
  "(": 11,
  ")": 12,
  "*": 21,
  "*=": 69,
  "+": 17,
  "++": 54,
  "+=": 72,
  ",": 6,
  "-": 18,
  "--": 55,
  "-->": 32,
  "-=": 73,
  ".": 15,
  "...": 49,
  "/": 5,
  "/=": 70,
  ":": 10,
  "<": 3,
  "<!--": 30,
  "<<": 57,
  "<<=": 74,
  "<=": 60,
  "=": 9,
  "==": 63,
  "===": 65,
  ">": 4,
  ">=": 61,
  ">>": 58,
  ">>=": 75,
  ">>>": 59,
  ">>>=": 76,
  "?": 23,
  "AccessorName": 141,
  "AdditiveExpression": 149,
  "ArgumentList": 143,
  "Arguments": 142,
  "ArrayLiteral": 129,
  "AssignmentExpression": 156,
  "AssignmentOperator": 157,
  "Attribute": 123,
  "AttributeList": 122,
  "AttributeValue": 127,
  "BR": 35,
  "BREAK": 86,
  "BooleanLiteral": 161,
  "CASE": 87,
  "CATCH": 88,
  "CLASS": 105,
  "COMMENT": 31,
  "CONST": 106,
  "CONTINUE": 89,
  "CSS": 28,
  "CallExpression": 138,
  "Component": 111,
  "ConditionalExpression": 155,
  "DEBUGGER": 90,
  "DEFAULT": 91,
  "DELETE": 92,
  "DO": 93,
  "Directive": 126,
  "EACH": 45,
  "ELSE": 44,
  "END_DIRECTIVE": 43,
  "ENUM": 107,
  "EOF": 1,
  "EXPORT": 108,
  "EXTENDS": 109,
  "EachStatement": 120,
  "Element": 114,
  "ElementList": 113,
  "Elision": 130,
  "EmptyTag": 115,
  "EqualityExpression": 152,
  "Expression": 158,
  "ExpressionStatement": 117,
  "FALSE": 82,
  "FINALLY": 94,
  "FOR": 95,
  "FROM": 41,
  "FUNCTION": 96,
  "FilterExpression": 139,
  "Fragments": 112,
  "FunctionBody": 51,
  "FunctionExpression": 52,
  "HR": 36,
  "IDENTIFIER": 33,
  "IF": 42,
  "IMPORT": 40,
  "IN": 46,
  "INPUT": 34,
  "INSTANCEOF": 62,
  "IdentifierName": 140,
  "IfStatement": 119,
  "ImportStatement": 118,
  "JS": 26,
  "LINK": 37,
  "LeftHandSideExpression": 144,
  "Literal": 159,
  "LogicalANDExpression": 153,
  "LogicalORExpression": 154,
  "META": 38,
  "MemberExpression": 136,
  "MultiplicativeExpression": 148,
  "NEW": 53,
  "NULL": 80,
  "NUMERIC_LITERAL": 83,
  "NewExpression": 137,
  "NullLiteral": 160,
  "NumericLiteral": 162,
  "ObjectLiteral": 131,
  "PlainAttribute": 124,
  "PostfixExpression": 145,
  "PrimaryExpression": 128,
  "PropertyAssignment": 133,
  "PropertyName": 134,
  "PropertyNameAndValueList": 132,
  "PropertySetParameterList": 135,
  "QUOTE": 48,
  "REGEXP_LITERAL": 85,
  "RETURN": 97,
  "RegularExpressionLiteral": 164,
  "RegularExpressionLiteralBegin": 165,
  "RelationalExpression": 151,
  "ReservedWord": 166,
  "START_DIRECTIVE": 39,
  "STRING_LITERAL": 84,
  "SUPER": 110,
  "SWITCH": 98,
  "ShiftExpression": 150,
  "SpreadAttribute": 125,
  "Statement": 116,
  "StringLiteral": 163,
  "TEMPLATE": 24,
  "TEXT": 29,
  "THIS": 50,
  "THROW": 99,
  "TRUE": 81,
  "TRY": 100,
  "TYPEOF": 56,
  "UNSAFE": 47,
  "UnaryExpr": 147,
  "UnaryExpression": 146,
  "UnsafeStatement": 121,
  "VAR": 101,
  "VOID": 102,
  "WHILE": 103,
  "WITH": 104,
  "[": 13,
  "]": 14,
  "^=": 78,
  "error": 2,
  "script": 25,
  "style": 27,
  "{": 7,
  "|": 16,
  "|=": 79,
  "||": 68,
  "}": 8,
  "~": 19
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "<",
  4: ">",
  5: "/",
  6: ",",
  7: "{",
  8: "}",
  9: "=",
  10: ":",
  11: "(",
  12: ")",
  13: "[",
  14: "]",
  15: ".",
  16: "|",
  17: "+",
  18: "-",
  19: "~",
  20: "!",
  21: "*",
  22: "%",
  23: "?",
  24: "TEMPLATE",
  25: "script",
  26: "JS",
  27: "style",
  28: "CSS",
  29: "TEXT",
  30: "<!--",
  31: "COMMENT",
  32: "-->",
  33: "IDENTIFIER",
  34: "INPUT",
  35: "BR",
  36: "HR",
  37: "LINK",
  38: "META",
  39: "START_DIRECTIVE",
  40: "IMPORT",
  41: "FROM",
  42: "IF",
  43: "END_DIRECTIVE",
  44: "ELSE",
  45: "EACH",
  46: "IN",
  47: "UNSAFE",
  48: "QUOTE",
  49: "...",
  50: "THIS",
  51: "FunctionBody",
  52: "FunctionExpression",
  53: "NEW",
  54: "++",
  55: "--",
  56: "TYPEOF",
  57: "<<",
  58: ">>",
  59: ">>>",
  60: "<=",
  61: ">=",
  62: "INSTANCEOF",
  63: "==",
  64: "!=",
  65: "===",
  66: "!==",
  67: "&&",
  68: "||",
  69: "*=",
  70: "/=",
  71: "%=",
  72: "+=",
  73: "-=",
  74: "<<=",
  75: ">>=",
  76: ">>>=",
  77: "&=",
  78: "^=",
  79: "|=",
  80: "NULL",
  81: "TRUE",
  82: "FALSE",
  83: "NUMERIC_LITERAL",
  84: "STRING_LITERAL",
  85: "REGEXP_LITERAL",
  86: "BREAK",
  87: "CASE",
  88: "CATCH",
  89: "CONTINUE",
  90: "DEBUGGER",
  91: "DEFAULT",
  92: "DELETE",
  93: "DO",
  94: "FINALLY",
  95: "FOR",
  96: "FUNCTION",
  97: "RETURN",
  98: "SWITCH",
  99: "THROW",
  100: "TRY",
  101: "VAR",
  102: "VOID",
  103: "WHILE",
  104: "WITH",
  105: "CLASS",
  106: "CONST",
  107: "ENUM",
  108: "EXPORT",
  109: "EXTENDS",
  110: "SUPER"
},
TERROR: 2,
EOF: 1,

// internals: defined here so the object *structure* doesn't get modified by parse() et al,
// thus helping JIT compilers like Chrome V8.
originalQuoteName: null,
originalParseError: null,
cleanupAfterParse: null,
constructParseErrorInfo: null,

__reentrant_call_depth: 0,      // INTERNAL USE ONLY
__error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

// APIs which will be set up depending on user action code analysis:
//yyRecovering: 0,
//yyErrOk: 0,
//yyClearIn: 0,

// Helper APIs
// -----------

// Helper function which can be overridden by user code later on: put suitable quotes around
// literal IDs in a description string.
quoteName: function parser_quoteName(id_str) {
    return '"' + id_str + '"';
},

// Return a more-or-less human-readable description of the given symbol, when available,
// or the symbol itself, serving as its own 'description' for lack of something better to serve up.
//
// Return NULL when the symbol is unknown to the parser.
describeSymbol: function parser_describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    }
    else if (symbol === this.EOF) {
        return 'end of input';
    }
    else if (this.terminals_[symbol]) {
        return this.quoteName(this.terminals_[symbol]);
    }
    // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
    //
    // An example of this may be where a rule's action code contains a call like this:
    //
    //      parser.describeSymbol(#$)
    //
    // to obtain a human-readable description or name of the current grammar rule. This comes handy in
    // error handling action code blocks, for example.
    var s = this.symbols_;
    for (var key in s) {
        if (s[key] === symbol) {
            return key;
        }
    }
    return null;
},

// Produce a (more or less) human-readable list of expected tokens at the point of failure.
//
// The produced list may contain token or token set descriptions instead of the tokens
// themselves to help turning this output into something that easier to read by humans
// unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
// expected terminals and nonterminals is produced.
//
// The returned list (array) will not contain any duplicate entries.
collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
    var TERROR = this.TERROR;
    var tokenset = [];
    var check = {};
    // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
    // If so, use that one instead of the less palatable token set.
    if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
        return [
            this.state_descriptions_[state]
        ];
    }
    for (var p in this.table[state]) {
        p = +p;
        if (p !== TERROR) {
            var d = do_not_describe ? p : this.describeSymbol(p);
            if (d && !check[d]) {
                tokenset.push(d);
                check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
            }
        }
    }
    return tokenset;
},
productions_: bp({
  pop: u([
  111,
  s,
  [112, 3],
  s,
  [113, 7],
  s,
  [114, 9],
  s,
  [115, 5],
  s,
  [116, 5],
  117,
  118,
  119,
  119,
  120,
  120,
  121,
  s,
  [122, 3],
  s,
  [123, 3],
  s,
  [124, 3],
  125,
  s,
  [126, 3],
  s,
  [127, 5],
  s,
  [128, 6],
  s,
  [129, 5],
  130,
  130,
  s,
  [131, 3],
  132,
  132,
  s,
  [133, 3],
  s,
  [134, 3],
  135,
  s,
  [136, 5],
  137,
  137,
  s,
  [138, 4],
  s,
  [139, 4],
  140,
  140,
  141,
  141,
  142,
  142,
  143,
  143,
  144,
  144,
  s,
  [145, 3],
  146,
  146,
  s,
  [147, 7],
  s,
  [148, 4],
  s,
  [149, 3],
  s,
  [150, 4],
  s,
  [151, 7],
  s,
  [152, 5],
  153,
  153,
  154,
  154,
  155,
  155,
  s,
  [156, 4],
  s,
  [157, 11],
  158,
  158,
  s,
  [159, 5],
  160,
  161,
  s,
  [161, 5, 1],
  165,
  s,
  [166, 36]
]),
  rule: u([
  2,
  s,
  [9, 3],
  1,
  2,
  s,
  [0, 5, 1],
  s,
  [1, 3],
  3,
  4,
  5,
  5,
  8,
  9,
  s,
  [1, 10],
  3,
  7,
  10,
  14,
  12,
  14,
  4,
  c,
  [33, 4],
  c,
  [14, 4],
  5,
  4,
  2,
  4,
  6,
  c,
  [11, 3],
  2,
  2,
  c,
  [15, 5],
  c,
  [53, 3],
  c,
  [49, 3],
  c,
  [14, 3],
  c,
  [60, 3],
  3,
  3,
  7,
  8,
  s,
  [1, 6],
  4,
  3,
  c,
  [25, 3],
  2,
  2,
  c,
  [7, 3],
  4,
  c,
  [84, 5],
  c,
  [38, 3],
  c,
  [43, 3],
  c,
  [53, 6],
  s,
  [2, 7],
  c,
  [46, 3],
  c,
  [20, 3],
  c,
  [3, 4],
  c,
  [4, 5],
  c,
  [7, 8],
  c,
  [39, 3],
  3,
  1,
  5,
  c,
  [89, 3],
  c,
  [47, 4],
  c,
  [132, 10],
  s,
  [1, 10],
  c,
  [119, 5],
  s,
  [1, 34]
])
}),
performAction: function parser__PerformAction(yylineno, yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {
/* this == yyval */
var yy = this.yy;

switch (yystate) {
case 1:
    /*! Production::    Component : ElementList EOF */
    this.$ = new ComponentNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    return this.$;
    break;

case 2:
    /*! Production::    Fragments : "<" TEMPLATE AttributeList ">" ElementList "<" "/" TEMPLATE ">" */
    this.$ = new TemplateNode(yyvstack[yysp - 6], yyvstack[yysp - 4], createSourceLocation(yylstack[yysp - 8], yylstack[yysp]));
    break;

case 3:
    /*! Production::    Fragments : "<" script AttributeList ">" JS "<" "/" script ">" */
    this.$ = new ScriptNode(yyvstack[yysp - 6], yyvstack[yysp - 4], createSourceLocation(yylstack[yysp - 8], yylstack[yysp]));
    break;

case 4:
    /*! Production::    Fragments : "<" style AttributeList ">" CSS "<" "/" style ">" */
    this.$ = new StyleNode(yyvstack[yysp - 6], yyvstack[yysp - 4], createSourceLocation(yylstack[yysp - 8], yylstack[yysp]));
    break;

case 5:
    /*! Production::    ElementList : Element */
case 8:
    /*! Production::    ElementList : AssignmentExpression */
case 53:
    /*! Production::    AttributeValue : ExpressionStatement */
case 72:
    /*! Production::    PropertyNameAndValueList : PropertyAssignment */
case 102:
    /*! Production::    ArgumentList : AssignmentExpression */
    this.$ = [yyvstack[yysp]];
    break;

case 6:
    /*! Production::    ElementList : ElementList Element */
case 9:
    /*! Production::    ElementList : Elision AssignmentExpression */
case 39:
    /*! Production::    AttributeList : AttributeList Attribute */
case 55:
    /*! Production::    AttributeValue : AttributeValue ExpressionStatement */
    this.$ = yyvstack[yysp - 1].concat(yyvstack[yysp]);
    break;

case 7:
    /*! Production::    ElementList : ε */
case 40:
    /*! Production::    AttributeList : ε */
case 100:
    /*! Production::    Arguments : "(" ")" */
    this.$ = [];
    break;

case 10:
    /*! Production::    ElementList : ElementList "," AssignmentExpression */
case 73:
    /*! Production::    PropertyNameAndValueList : PropertyNameAndValueList "," PropertyAssignment */
case 103:
    /*! Production::    ArgumentList : ArgumentList "," AssignmentExpression */
    this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp]);
    break;

case 11:
    /*! Production::    ElementList : ElementList "," Elision AssignmentExpression */
    this.$ = yyvstack[yysp - 3].concat(yyvstack[yysp - 1]).concat(yyvstack[yysp]);
    break;

case 12:
    /*! Production::    Element : TEXT */
    this.$ = new TextNode(yyvstack[yysp], createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 13:
    /*! Production::    Element : Statement */
case 14:
    /*! Production::    Element : Fragments */
    this.$ = yyvstack[yysp];
    break;

case 15:
    /*! Production::    Element : "<!--" COMMENT "-->" */
    this.$ = new CommentNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 16:
    /*! Production::    Element : "<" EmptyTag AttributeList ">" */
    this.$ = new ElementNode(yyvstack[yysp - 2], yyvstack[yysp - 1], [], createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 17:
    /*! Production::    Element : "<" EmptyTag AttributeList "/" ">" */
case 18:
    /*! Production::    Element : "<" IDENTIFIER AttributeList "/" ">" */
    this.$ = new ElementNode(yyvstack[yysp - 3], yyvstack[yysp - 2], [], createSourceLocation(yylstack[yysp - 4], yylstack[yysp]));
    break;

case 19:
    /*! Production::    Element : "<" IDENTIFIER AttributeList ">" "<" "/" IDENTIFIER ">" */
    if (yyvstack[yysp - 6] == yyvstack[yysp - 1]) {
        this.$ = new ElementNode(yyvstack[yysp - 6], yyvstack[yysp - 5], [], createSourceLocation(yylstack[yysp - 7], yylstack[yysp]));
    } else {
        throw new SyntaxError(
            "Syntax error on line " + (yylineno + 1) + ":\n" +
            "Tag identifiers should be same (<" + yyvstack[yysp - 6] + "> != </" + yyvstack[yysp - 1] + ">)"
        );
    }
    break;

case 20:
    /*! Production::    Element : "<" IDENTIFIER AttributeList ">" ElementList "<" "/" IDENTIFIER ">" */
    if (yyvstack[yysp - 7] == yyvstack[yysp - 1]) {
        this.$ = new ElementNode(yyvstack[yysp - 7], yyvstack[yysp - 6], yyvstack[yysp - 4], createSourceLocation(yylstack[yysp - 8], yylstack[yysp]));
    } else {
        throw new SyntaxError(
            "Syntax error on line " + (yylineno + 1) + ":\n" +
            "Tag identifiers should be same (<" + yyvstack[yysp - 7] + "> != </" + yyvstack[yysp - 1] + ">)"
        );
    }
    break;

case 31:
    /*! Production::    ExpressionStatement : "{" Expression "}" */
    this.$ = new ExpressionStatementNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 32:
    /*! Production::    ImportStatement : "{" START_DIRECTIVE IMPORT IdentifierName FROM StringLiteral "}" */
    this.$ = new ImportStatementNode(yyvstack[yysp - 4], yyvstack[yysp - 2], createSourceLocation(yylstack[yysp - 6], yylstack[yysp - 3]));
    break;

case 33:
    /*! Production::    IfStatement : "{" START_DIRECTIVE IF Expression "}" ElementList "{" END_DIRECTIVE IF "}" */
    this.$ = new IfStatementNode(yyvstack[yysp - 6], yyvstack[yysp - 4], null, createSourceLocation(yylstack[yysp - 9], yylstack[yysp]));
    break;

case 34:
    /*! Production::    IfStatement : "{" START_DIRECTIVE IF Expression "}" ElementList "{" ELSE "}" ElementList "{" END_DIRECTIVE IF "}" */
    this.$ = new IfStatementNode(yyvstack[yysp - 10], yyvstack[yysp - 8], yyvstack[yysp - 4], createSourceLocation(yylstack[yysp - 13], yylstack[yysp]));
    break;

case 35:
    /*! Production::    EachStatement : "{" START_DIRECTIVE EACH IDENTIFIER IN Expression "}" ElementList "{" END_DIRECTIVE EACH "}" */
    this.$ = new EachStatementNode(yyvstack[yysp - 6], yyvstack[yysp - 4], {value: yyvstack[yysp - 8]}, createSourceLocation(yylstack[yysp - 11], yylstack[yysp]));
    break;

case 36:
    /*! Production::    EachStatement : "{" START_DIRECTIVE EACH IDENTIFIER "," IDENTIFIER IN Expression "}" ElementList "{" END_DIRECTIVE EACH "}" */
    this.$ = new EachStatementNode(yyvstack[yysp - 6], yyvstack[yysp - 4], {key: yyvstack[yysp - 10], value: yyvstack[yysp - 8]}, createSourceLocation(yylstack[yysp - 13], yylstack[yysp - 1]));
    break;

case 37:
    /*! Production::    UnsafeStatement : "{" UNSAFE Expression "}" */
    this.$ = new UnsafeStatementNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 38:
    /*! Production::    AttributeList : Attribute */
    this.$ = [yyvstack[yysp]]
    break;

case 44:
    /*! Production::    PlainAttribute : IDENTIFIER */
    this.$ = new AttributeNode(yyvstack[yysp], null, createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 45:
    /*! Production::    PlainAttribute : IDENTIFIER "=" ExpressionStatement */
    this.$ = new AttributeNode(yyvstack[yysp - 2], [yyvstack[yysp]], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 46:
    /*! Production::    PlainAttribute : IDENTIFIER "=" QUOTE AttributeValue QUOTE */
    this.$ = new AttributeNode(yyvstack[yysp - 4], yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 4], yylstack[yysp]));
    break;

case 47:
    /*! Production::    SpreadAttribute : "{" "..." IdentifierName "}" */
    this.$ = new SpreadAttributeNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 48:
    /*! Production::    Directive : ":" IDENTIFIER */
    this.$ = new DirectiveNode(yyvstack[yysp], null, createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 49:
    /*! Production::    Directive : ":" IDENTIFIER "=" ExpressionStatement */
    this.$ = new DirectiveNode(yyvstack[yysp - 2], [yyvstack[yysp]], createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 50:
    /*! Production::    Directive : ":" IDENTIFIER "=" QUOTE AttributeValue QUOTE */
    this.$ = new DirectiveNode(yyvstack[yysp - 4], yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 5], yylstack[yysp]));
    break;

case 52:
    /*! Production::    AttributeValue : TEXT */
    this.$ = [new LiteralNode(JSON.stringify(yyvstack[yysp]), createSourceLocation(yylstack[yysp], yylstack[yysp]))];
    break;

case 54:
    /*! Production::    AttributeValue : AttributeValue TEXT */
    this.$ = yyvstack[yysp - 1].concat(new LiteralNode(JSON.stringify(yyvstack[yysp]), createSourceLocation(yylstack[yysp - 1], yylstack[yysp - 1])));
    break;

case 56:
    /*! Production::    PrimaryExpression : THIS */
    this.$ = new ThisExpressionNode(createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 57:
    /*! Production::    PrimaryExpression : IDENTIFIER */
case 96:
    /*! Production::    IdentifierName : IDENTIFIER */
case 97:
    /*! Production::    IdentifierName : ReservedWord */
    this.$ = new IdentifierNode(yyvstack[yysp], createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 60:
    /*! Production::    PrimaryExpression : "(" Expression ")" */
case 101:
    /*! Production::    Arguments : "(" ArgumentList ")" */
    this.$ = yyvstack[yysp - 1];
    break;

case 62:
    /*! Production::    ArrayLiteral : "[" "]" */
    this.$ = new ArrayExpressionNode([], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 63:
    /*! Production::    ArrayLiteral : "[" Elision "]" */
case 64:
    /*! Production::    ArrayLiteral : "[" ElementList "]" */
    this.$ = new ArrayExpressionNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 65:
    /*! Production::    ArrayLiteral : "[" ElementList "," "]" */
    this.$ = new ArrayExpressionNode(yyvstack[yysp - 2].concat(null), createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 66:
    /*! Production::    ArrayLiteral : "[" ElementList "," Elision "]" */
    this.$ = new ArrayExpressionNode(yyvstack[yysp - 3].concat(yyvstack[yysp - 1]), createSourceLocation(yylstack[yysp - 4], yylstack[yysp]));
    break;

case 67:
    /*! Production::    Elision : "," */
    this.$ = [null, null];
    break;

case 68:
    /*! Production::    Elision : Elision "," */
    this.$ = yyvstack[yysp - 1].concat(null);
    break;

case 69:
    /*! Production::    ObjectLiteral : "{" "}" */
    this.$ = new ObjectExpressionNode([], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 70:
    /*! Production::    ObjectLiteral : "{" PropertyNameAndValueList "}" */
    this.$ = new ObjectExpressionNode(yyvstack[yysp - 1], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 71:
    /*! Production::    ObjectLiteral : "{" PropertyNameAndValueList "," "}" */
    this.$ = new ObjectExpressionNode(yyvstack[yysp - 2], createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 74:
    /*! Production::    PropertyAssignment : PropertyName ":" AssignmentExpression */
    this.$ = {key: yyvstack[yysp - 2], value: yyvstack[yysp], kind: "init"};
    break;

case 75:
    /*! Production::    PropertyAssignment : IDENTIFIER PropertyName "(" ")" "{" FunctionBody "}" */
    if (yyvstack[yysp - 6] === "get") {
        this.$ = {key: yyvstack[yysp - 5], value: (new FunctionExpressionNode(null, [], yyvstack[yysp - 1], false, false, createSourceLocation(yylstack[yysp - 5], yylstack[yysp]))), kind: "get"};
    } else {
        this.parseError("Invalid getter", {});
    }
    break;

case 76:
    /*! Production::    PropertyAssignment : IDENTIFIER PropertyName "(" PropertySetParameterList ")" "{" FunctionBody "}" */
    if (yyvstack[yysp - 7] === "set") {
        this.$ = {key: yyvstack[yysp - 6], value: (new FunctionExpressionNode(null, yyvstack[yysp - 4], yyvstack[yysp - 1], false, false, createSourceLocation(yylstack[yysp - 6], yylstack[yysp]))), kind: "set"};
    } else {
        this.parseError("Invalid setter", {});
    }
    break;

case 80:
    /*! Production::    PropertySetParameterList : IDENTIFIER */
    this.$ = [new IdentifierNode(yyvstack[yysp], createSourceLocation(yylstack[yysp], yylstack[yysp]))];
    break;

case 83:
    /*! Production::    MemberExpression : MemberExpression "[" Expression "]" */
case 90:
    /*! Production::    CallExpression : CallExpression "[" Expression "]" */
    this.$ = new MemberExpressionNode(yyvstack[yysp - 3], yyvstack[yysp - 1], true, createSourceLocation(yylstack[yysp - 3], yylstack[yysp]));
    break;

case 84:
    /*! Production::    MemberExpression : MemberExpression "." AccessorName */
case 91:
    /*! Production::    CallExpression : CallExpression "." AccessorName */
    this.$ = new MemberExpressionNode(yyvstack[yysp - 2], yyvstack[yysp], false, createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 85:
    /*! Production::    MemberExpression : NEW MemberExpression Arguments */
    this.$ = new NewExpressionNode(yyvstack[yysp - 1], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 87:
    /*! Production::    NewExpression : NEW NewExpression */
    this.$ = new NewExpressionNode(yyvstack[yysp], null, createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 88:
    /*! Production::    CallExpression : MemberExpression Arguments */
case 89:
    /*! Production::    CallExpression : CallExpression Arguments */
    this.$ = new CallExpressionNode(yyvstack[yysp - 1], yyvstack[yysp], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 92:
    /*! Production::    FilterExpression : Expression "|" AccessorName */
case 94:
    /*! Production::    FilterExpression : FilterExpression "|" AccessorName */
    this.$ = new FilterExpressionNode(yyvstack[yysp], [yyvstack[yysp - 2]], createSourceLocation(yylstack[yysp - 2], yylstack[yysp - 1]));
    break;

case 93:
    /*! Production::    FilterExpression : Expression "|" AccessorName Arguments */
case 95:
    /*! Production::    FilterExpression : FilterExpression "|" AccessorName Arguments */
    this.$ = new FilterExpressionNode(yyvstack[yysp - 1], [yyvstack[yysp - 3]].concat(yyvstack[yysp]), createSourceLocation(yylstack[yysp - 3], yylstack[yysp - 2]));
    break;

case 98:
    /*! Production::    AccessorName : IDENTIFIER */
case 99:
    /*! Production::    AccessorName : ReservedWord */
    this.$ = new AccessorNode(yyvstack[yysp], createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 107:
    /*! Production::    PostfixExpression : LeftHandSideExpression "++" */
    this.$ = new UpdateExpressionNode("++", yyvstack[yysp - 1], false, createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 108:
    /*! Production::    PostfixExpression : LeftHandSideExpression "--" */
    this.$ = new UpdateExpressionNode("--", yyvstack[yysp - 1], false, createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 111:
    /*! Production::    UnaryExpr : TYPEOF UnaryExpression */
    this.$ = new UnaryExpressionNode("typeof", true, yyvstack[yysp], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 112:
    /*! Production::    UnaryExpr : "++" UnaryExpression */
    this.$ = new UpdateExpressionNode("++", yyvstack[yysp], true, createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 113:
    /*! Production::    UnaryExpr : "--" UnaryExpression */
    this.$ = new UpdateExpressionNode("--", yyvstack[yysp], true, createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 114:
    /*! Production::    UnaryExpr : "+" UnaryExpression */
    this.$ = new UnaryExpressionNode("+", true, yyvstack[yysp], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 115:
    /*! Production::    UnaryExpr : "-" UnaryExpression */
    this.$ = new UnaryExpressionNode("-", true, yyvstack[yysp], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 116:
    /*! Production::    UnaryExpr : "~" UnaryExpression */
    this.$ = new UnaryExpressionNode("~", true, yyvstack[yysp], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 117:
    /*! Production::    UnaryExpr : "!" UnaryExpression */
    this.$ = new UnaryExpressionNode("!", true, yyvstack[yysp], createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 119:
    /*! Production::    MultiplicativeExpression : MultiplicativeExpression "*" UnaryExpression */
    this.$ = new BinaryExpressionNode("*", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 120:
    /*! Production::    MultiplicativeExpression : MultiplicativeExpression "/" UnaryExpression */
    this.$ = new BinaryExpressionNode("/", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 121:
    /*! Production::    MultiplicativeExpression : MultiplicativeExpression "%" UnaryExpression */
    this.$ = new BinaryExpressionNode("%", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 123:
    /*! Production::    AdditiveExpression : AdditiveExpression "+" MultiplicativeExpression */
    this.$ = new BinaryExpressionNode("+", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 124:
    /*! Production::    AdditiveExpression : AdditiveExpression "-" MultiplicativeExpression */
    this.$ = new BinaryExpressionNode("-", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 126:
    /*! Production::    ShiftExpression : ShiftExpression "<<" AdditiveExpression */
    this.$ = new BinaryExpressionNode("<<", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 127:
    /*! Production::    ShiftExpression : ShiftExpression ">>" AdditiveExpression */
    this.$ = new BinaryExpressionNode(">>", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 128:
    /*! Production::    ShiftExpression : ShiftExpression ">>>" AdditiveExpression */
    this.$ = new BinaryExpressionNode(">>>", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 130:
    /*! Production::    RelationalExpression : RelationalExpression "<" ShiftExpression */
    this.$ = new BinaryExpressionNode("<", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 131:
    /*! Production::    RelationalExpression : RelationalExpression ">" ShiftExpression */
    this.$ = new BinaryExpressionNode(">", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 132:
    /*! Production::    RelationalExpression : RelationalExpression "<=" ShiftExpression */
    this.$ = new BinaryExpressionNode("<=", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 133:
    /*! Production::    RelationalExpression : RelationalExpression ">=" ShiftExpression */
    this.$ = new BinaryExpressionNode(">=", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 134:
    /*! Production::    RelationalExpression : RelationalExpression INSTANCEOF ShiftExpression */
    this.$ = new BinaryExpressionNode("instanceof", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 135:
    /*! Production::    RelationalExpression : RelationalExpression IN ShiftExpression */
    this.$ = new BinaryExpressionNode("in", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 137:
    /*! Production::    EqualityExpression : EqualityExpression "==" RelationalExpression */
    this.$ = new BinaryExpressionNode("==", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 138:
    /*! Production::    EqualityExpression : EqualityExpression "!=" RelationalExpression */
    this.$ = new BinaryExpressionNode("!=", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 139:
    /*! Production::    EqualityExpression : EqualityExpression "===" RelationalExpression */
    this.$ = new BinaryExpressionNode("===", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 140:
    /*! Production::    EqualityExpression : EqualityExpression "!==" RelationalExpression */
    this.$ = new BinaryExpressionNode("!==", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 142:
    /*! Production::    LogicalANDExpression : LogicalANDExpression "&&" EqualityExpression */
    this.$ = new LogicalExpressionNode("&&", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 144:
    /*! Production::    LogicalORExpression : LogicalORExpression "||" LogicalANDExpression */
    this.$ = new LogicalExpressionNode("||", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 146:
    /*! Production::    ConditionalExpression : LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression */
    this.$ = new ConditionalExpressionNode(yyvstack[yysp - 4], yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 4], yylstack[yysp]));
    break;

case 149:
    /*! Production::    AssignmentExpression : LeftHandSideExpression "=" AssignmentExpression */
    this.$ = new AssignmentExpressionNode("=", yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 150:
    /*! Production::    AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression */
    this.$ = new AssignmentExpressionNode(yyvstack[yysp - 1], yyvstack[yysp - 2], yyvstack[yysp], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    break;

case 163:
    /*! Production::    Expression : Expression "," AssignmentExpression */
    if (yyvstack[yysp - 2].type === "SequenceExpression") {
        yyvstack[yysp - 2].expressions.concat(yyvstack[yysp]);
        yyvstack[yysp - 2].loc = createSourceLocation(yylstack[yysp - 2], yylstack[yysp]);
        this.$ = yyvstack[yysp - 2];
    } else {
        this.$ = new SequenceExpressionNode([yyvstack[yysp - 2], yyvstack[yysp]], createSourceLocation(yylstack[yysp - 2], yylstack[yysp]));
    }
    break;

case 169:
    /*! Production::    NullLiteral : NULL */
    this.$ = new LiteralNode(null, createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 170:
    /*! Production::    BooleanLiteral : TRUE */
    this.$ = new LiteralNode(true, createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 171:
    /*! Production::    BooleanLiteral : FALSE */
    this.$ = new LiteralNode(false, createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 172:
    /*! Production::    NumericLiteral : NUMERIC_LITERAL */
    this.$ = new LiteralNode(parseNumericLiteral(yyvstack[yysp]), createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 173:
    /*! Production::    StringLiteral : STRING_LITERAL */
    this.$ = new LiteralNode(yyvstack[yysp], createSourceLocation(yylstack[yysp], yylstack[yysp]));
    break;

case 174:
    /*! Production::    RegularExpressionLiteral : RegularExpressionLiteralBegin REGEXP_LITERAL */
    this.$ = new LiteralNode(parseRegularExpressionLiteral(yyvstack[yysp - 1] + yyvstack[yysp]), createSourceLocation(yylstack[yysp - 1], yylstack[yysp]));
    break;

case 175:
    /*! Production::    RegularExpressionLiteralBegin : "/" */
case 176:
    /*! Production::    RegularExpressionLiteralBegin : "/=" */
    yy.lexer.begin("regexp");
    break;

}
},
table: bt({
  len: u([
  65,
  1,
  14,
  0,
  8,
  50,
  s,
  [0, 3],
  1,
  10,
  0,
  11,
  46,
  s,
  [0, 6],
  13,
  2,
  0,
  49,
  87,
  14,
  49,
  26,
  18,
  0,
  0,
  23,
  s,
  [0, 4],
  49,
  0,
  26,
  s,
  [0, 5],
  64,
  28,
  s,
  [0, 5],
  1,
  31,
  s,
  [0, 5],
  s,
  [38, 7],
  0,
  0,
  51,
  51,
  8,
  0,
  47,
  1,
  10,
  10,
  s,
  [9, 3],
  s,
  [0, 5],
  39,
  49,
  49,
  s,
  [0, 13],
  49,
  44,
  39,
  49,
  0,
  49,
  39,
  51,
  3,
  3,
  49,
  0,
  2,
  c,
  [63, 3],
  84,
  0,
  42,
  42,
  27,
  s,
  [0, 18],
  42,
  c,
  [58, 3],
  c,
  [8, 5],
  42,
  c,
  [10, 3],
  s,
  [0, 5],
  43,
  c,
  [54, 3],
  0,
  49,
  s,
  [42, 4],
  s,
  [41, 6],
  3,
  s,
  [40, 3],
  0,
  51,
  14,
  39,
  39,
  c,
  [124, 4],
  0,
  33,
  s,
  [0, 6],
  8,
  50,
  45,
  s,
  [0, 9],
  c,
  [128, 5],
  6,
  1,
  1,
  9,
  s,
  [8, 3],
  13,
  s,
  [0, 4],
  3,
  14,
  13,
  0,
  3,
  0,
  0,
  2,
  3,
  c,
  [149, 3],
  1,
  3,
  0,
  46,
  49,
  1,
  0,
  18,
  c,
  [16, 3],
  s,
  [23, 4],
  s,
  [26, 6],
  0,
  s,
  [28, 3],
  0,
  0,
  52,
  31,
  c,
  [211, 4],
  8,
  0,
  1,
  0,
  3,
  39,
  6,
  1,
  63,
  63,
  1,
  1,
  c,
  [244, 3],
  c,
  [185, 3],
  1,
  3,
  c,
  [176, 3],
  0,
  3,
  c,
  [50, 3],
  51,
  0,
  0,
  5,
  c,
  [66, 4],
  11,
  13,
  13,
  c,
  [29, 3],
  3,
  2,
  63,
  49,
  s,
  [1, 3],
  0,
  0,
  4,
  s,
  [0, 4],
  5,
  1,
  11,
  11,
  s,
  [1, 3],
  13,
  3,
  c,
  [19, 5],
  0,
  4,
  s,
  [1, 5],
  0,
  53,
  c,
  [35, 4],
  c,
  [238, 3],
  s,
  [1, 5],
  13,
  3,
  c,
  [92, 3],
  c,
  [315, 4],
  63,
  52,
  63,
  c,
  [352, 3],
  1,
  13,
  52,
  1,
  52,
  1,
  c,
  [28, 4],
  0,
  0
]),
  symbol: u([
  1,
  3,
  5,
  6,
  7,
  11,
  13,
  s,
  [17, 4, 1],
  29,
  30,
  33,
  50,
  s,
  [52, 5, 1],
  70,
  s,
  [80, 5, 1],
  s,
  [111, 4, 1],
  s,
  [116, 6, 1],
  s,
  [128, 4, 1],
  s,
  [136, 4, 1],
  s,
  [144, 13, 1],
  s,
  [158, 8, 1],
  1,
  1,
  3,
  6,
  7,
  29,
  30,
  112,
  c,
  [44, 7],
  c,
  [14, 4],
  14,
  16,
  29,
  30,
  c,
  [86, 9],
  c,
  [84, 13],
  128,
  129,
  c,
  [73, 26],
  31,
  24,
  25,
  27,
  s,
  [33, 6, 1],
  115,
  c,
  [69, 4],
  s,
  [8, 5, 2],
  29,
  30,
  1,
  s,
  [3, 8, 1],
  c,
  [14, 3],
  17,
  18,
  21,
  22,
  23,
  29,
  30,
  46,
  54,
  55,
  s,
  [57, 23, 1],
  157,
  c,
  [57, 9],
  c,
  [39, 3],
  68,
  6,
  16,
  c,
  [61, 9],
  s,
  [11, 8, 1],
  c,
  [64, 31],
  142,
  5,
  7,
  8,
  c,
  [182, 7],
  39,
  s,
  [40, 4, 2],
  47,
  c,
  [188, 6],
  62,
  c,
  [189, 6],
  s,
  [86, 25, 1],
  c,
  [214, 3],
  132,
  133,
  134,
  s,
  [136, 5, 1],
  c,
  [218, 21],
  166,
  c,
  [151, 12],
  67,
  68,
  c,
  [150, 51],
  11,
  13,
  c,
  [327, 4],
  c,
  [324, 11],
  c,
  [381, 8],
  c,
  [89, 11],
  c,
  [56, 6],
  c,
  [93, 3],
  c,
  [19, 10],
  46,
  c,
  [79, 9],
  c,
  [67, 4],
  c,
  [398, 45],
  c,
  [72, 14],
  c,
  [154, 12],
  c,
  [561, 6],
  14,
  c,
  [562, 19],
  c,
  [561, 39],
  c,
  [90, 9],
  17,
  18,
  c,
  [92, 16],
  85,
  c,
  [284, 7],
  c,
  [494, 12],
  c,
  [32, 12],
  c,
  [199, 27],
  c,
  [108, 4],
  c,
  [98, 7],
  c,
  [38, 229],
  c,
  [864, 23],
  c,
  [377, 27],
  c,
  [89, 9],
  39,
  c,
  [728, 7],
  c,
  [518, 36],
  c,
  [974, 6],
  8,
  33,
  c,
  [783, 4],
  50,
  53,
  56,
  62,
  c,
  [778, 30],
  c,
  [775, 3],
  140,
  162,
  163,
  166,
  32,
  4,
  5,
  7,
  10,
  33,
  s,
  [122, 5, 1],
  c,
  [10, 11],
  c,
  [9, 26],
  c,
  [94, 12],
  c,
  [92, 25],
  141,
  166,
  c,
  [709, 49],
  c,
  [49, 125],
  c,
  [48, 10],
  c,
  [44, 7],
  c,
  [230, 137],
  c,
  [137, 42],
  12,
  c,
  [89, 25],
  s,
  [143, 14, 1],
  c,
  [90, 8],
  6,
  8,
  16,
  40,
  42,
  45,
  c,
  [145, 49],
  6,
  8,
  10,
  c,
  [1016, 4],
  c,
  [1299, 4],
  13,
  c,
  [1297, 7],
  c,
  [164, 7],
  s,
  [54, 31, 1],
  c,
  [190, 25],
  c,
  [647, 5],
  c,
  [84, 16],
  c,
  [1379, 26],
  c,
  [42, 42],
  c,
  [719, 3],
  c,
  [1421, 24],
  c,
  [69, 47],
  c,
  [996, 34],
  c,
  [192, 84],
  c,
  [165, 44],
  c,
  [731, 34],
  c,
  [642, 95],
  c,
  [1834, 53],
  c,
  [180, 31],
  c,
  [953, 42],
  c,
  [42, 125],
  c,
  [41, 212],
  6,
  12,
  16,
  c,
  [44, 33],
  c,
  [84, 40],
  c,
  [40, 48],
  c,
  [2228, 9],
  c,
  [676, 41],
  c,
  [1787, 4],
  c,
  [2776, 10],
  c,
  [105, 32],
  c,
  [144, 39],
  c,
  [2096, 121],
  c,
  [2393, 19],
  c,
  [839, 14],
  c,
  [3001, 58],
  10,
  c,
  [2077, 39],
  c,
  [1428, 5],
  c,
  [2064, 5],
  c,
  [2073, 7],
  9,
  10,
  33,
  49,
  33,
  c,
  [17, 10],
  c,
  [8, 23],
  c,
  [2788, 6],
  11,
  c,
  [3086, 5],
  142,
  6,
  10,
  c,
  [3029, 3],
  c,
  [2893, 14],
  c,
  [30, 12],
  14,
  16,
  6,
  12,
  c,
  [614, 3],
  c,
  [1119, 37],
  140,
  c,
  [1898, 50],
  33,
  c,
  [1760, 3],
  c,
  [2315, 40],
  c,
  [2314, 6],
  c,
  [99, 49],
  11,
  c,
  [3027, 18],
  c,
  [214, 3],
  c,
  [3030, 23],
  c,
  [23, 83],
  c,
  [531, 14],
  c,
  [26, 138],
  c,
  [3116, 18],
  c,
  [28, 56],
  c,
  [1035, 25],
  c,
  [3252, 30],
  c,
  [3223, 28],
  c,
  [31, 33],
  c,
  [859, 6],
  4,
  7,
  48,
  117,
  c,
  [667, 39],
  c,
  [798, 6],
  4,
  c,
  [3997, 25],
  c,
  [3435, 38],
  c,
  [63, 63],
  26,
  28,
  c,
  [2700, 98],
  41,
  c,
  [851, 3],
  6,
  46,
  c,
  [5, 3],
  12,
  33,
  135,
  c,
  [1445, 51],
  7,
  29,
  48,
  117,
  127,
  c,
  [117, 49],
  8,
  c,
  [393, 3],
  5,
  c,
  [4207, 10],
  c,
  [4289, 13],
  c,
  [13, 14],
  3,
  c,
  [1102, 3],
  84,
  163,
  c,
  [328, 63],
  c,
  [1128, 50],
  7,
  12,
  c,
  [217, 4],
  c,
  [221, 5],
  33,
  c,
  [169, 11],
  c,
  [11, 12],
  5,
  8,
  c,
  [170, 13],
  c,
  [322, 3],
  46,
  51,
  7,
  c,
  [50, 4],
  4,
  33,
  c,
  [38, 3],
  c,
  [3564, 10],
  43,
  44,
  c,
  [3566, 41],
  c,
  [231, 112],
  8,
  51,
  s,
  [4, 4],
  42,
  c,
  [201, 17],
  8,
  8,
  c,
  [138, 72],
  39,
  43,
  c,
  [253, 104],
  c,
  [196, 13],
  45,
  c,
  [14, 13],
  c,
  [142, 52],
  8,
  c,
  [53, 52],
  42,
  45,
  8,
  8
]),
  type: u([
  s,
  [2, 26],
  s,
  [0, 39],
  1,
  c,
  [46, 14],
  s,
  [2, 30],
  s,
  [0, 28],
  c,
  [38, 11],
  s,
  [2, 56],
  c,
  [57, 57],
  c,
  [64, 62],
  s,
  [0, 33],
  c,
  [150, 77],
  c,
  [89, 75],
  c,
  [179, 79],
  s,
  [0, 38],
  s,
  [2, 81],
  c,
  [98, 38],
  c,
  [38, 228],
  c,
  [386, 30],
  c,
  [518, 99],
  c,
  [55, 13],
  c,
  [11, 10],
  c,
  [10, 9],
  c,
  [9, 27],
  c,
  [92, 35],
  c,
  [191, 70],
  c,
  [49, 121],
  c,
  [230, 158],
  c,
  [137, 39],
  c,
  [611, 53],
  c,
  [1133, 84],
  c,
  [649, 35],
  s,
  [2, 99],
  c,
  [198, 76],
  c,
  [279, 99],
  c,
  [1388, 82],
  c,
  [642, 115],
  c,
  [1984, 48],
  c,
  [179, 63],
  c,
  [42, 125],
  c,
  [41, 226],
  c,
  [44, 22],
  c,
  [40, 101],
  c,
  [676, 36],
  c,
  [105, 47],
  c,
  [39, 77],
  c,
  [2096, 98],
  c,
  [2603, 109],
  c,
  [2064, 14],
  c,
  [27, 17],
  c,
  [8, 28],
  c,
  [2977, 38],
  c,
  [229, 46],
  c,
  [1207, 88],
  c,
  [72, 13],
  c,
  [1803, 131],
  s,
  [2, 295],
  c,
  [3252, 102],
  c,
  [1786, 72],
  c,
  [3435, 63],
  c,
  [63, 61],
  c,
  [2700, 88],
  c,
  [112, 55],
  c,
  [117, 54],
  c,
  [4207, 17],
  c,
  [145, 13],
  c,
  [1540, 15],
  c,
  [328, 84],
  c,
  [1659, 35],
  c,
  [221, 16],
  c,
  [4387, 20],
  c,
  [100, 17],
  c,
  [4482, 69],
  c,
  [231, 108],
  c,
  [201, 24],
  c,
  [760, 83],
  c,
  [253, 96],
  c,
  [2107, 43],
  c,
  [142, 84],
  s,
  [2, 4]
]),
  state: u([
  1,
  8,
  2,
  3,
  7,
  s,
  [15, 5, 1],
  29,
  35,
  5,
  37,
  26,
  22,
  23,
  12,
  13,
  56,
  55,
  57,
  s,
  [52, 4, -7],
  28,
  25,
  20,
  11,
  4,
  21,
  34,
  s,
  [39, 5, 1],
  51,
  8,
  66,
  c,
  [37, 8],
  c,
  [36, 17],
  69,
  c,
  [36, 8],
  73,
  85,
  103,
  c,
  [31, 3],
  111,
  113,
  114,
  c,
  [34, 4],
  116,
  c,
  [35, 12],
  112,
  107,
  c,
  [35, 3],
  118,
  117,
  43,
  51,
  120,
  157,
  c,
  [34, 3],
  161,
  160,
  c,
  [49, 7],
  c,
  [77, 19],
  112,
  172,
  c,
  [113, 8],
  178,
  c,
  [151, 9],
  177,
  c,
  [151, 26],
  c,
  [66, 6],
  186,
  56,
  185,
  57,
  c,
  [17, 15],
  187,
  c,
  [17, 16],
  188,
  c,
  [17, 16],
  189,
  c,
  [17, 16],
  190,
  c,
  [17, 16],
  191,
  c,
  [17, 16],
  192,
  c,
  [17, 10],
  194,
  c,
  [148, 17],
  193,
  c,
  [148, 14],
  c,
  [214, 14],
  c,
  [256, 4],
  c,
  [28, 4],
  c,
  [285, 3],
  116,
  197,
  196,
  120,
  s,
  [205, 5, 1],
  213,
  c,
  [5, 4],
  214,
  c,
  [5, 4],
  215,
  c,
  [5, 4],
  216,
  c,
  [5, 4],
  217,
  219,
  c,
  [62, 19],
  220,
  c,
  [90, 27],
  221,
  c,
  [28, 27],
  222,
  c,
  [294, 16],
  c,
  [27, 7],
  223,
  c,
  [23, 7],
  224,
  c,
  [109, 20],
  225,
  c,
  [199, 28],
  226,
  c,
  [28, 7],
  227,
  c,
  [58, 8],
  229,
  c,
  [31, 12],
  230,
  c,
  [59, 28],
  235,
  c,
  [28, 7],
  239,
  c,
  [256, 4],
  c,
  [517, 18],
  c,
  [451, 19],
  c,
  [61, 6],
  241,
  c,
  [84, 27],
  242,
  c,
  [28, 7],
  243,
  219,
  244,
  c,
  [53, 13],
  245,
  c,
  [74, 20],
  246,
  c,
  [21, 20],
  247,
  c,
  [21, 20],
  248,
  c,
  [21, 19],
  249,
  c,
  [20, 19],
  250,
  c,
  [20, 19],
  251,
  c,
  [20, 19],
  252,
  c,
  [20, 19],
  253,
  c,
  [20, 19],
  254,
  c,
  [20, 18],
  256,
  c,
  [19, 18],
  257,
  c,
  [19, 18],
  258,
  c,
  [292, 26],
  c,
  [925, 9],
  c,
  [961, 14],
  c,
  [55, 4],
  262,
  c,
  [73, 17],
  263,
  c,
  [18, 15],
  264,
  c,
  [403, 16],
  265,
  c,
  [17, 16],
  266,
  c,
  [17, 14],
  c,
  [123, 13],
  267,
  c,
  [123, 8],
  c,
  [499, 5],
  270,
  c,
  [734, 3],
  c,
  [4, 16],
  279,
  281,
  285,
  c,
  [523, 4],
  c,
  [472, 17],
  286,
  c,
  [57, 7],
  290,
  c,
  [813, 5],
  c,
  [34, 19],
  291,
  c,
  [618, 10],
  295,
  c,
  [905, 26],
  297,
  300,
  120,
  8,
  304,
  c,
  [1245, 37],
  305,
  c,
  [38, 36],
  c,
  [136, 19],
  308,
  c,
  [28, 27],
  309,
  c,
  [28, 8],
  315,
  c,
  [284, 28],
  320,
  318,
  c,
  [1071, 28],
  322,
  73,
  c,
  [439, 8],
  c,
  [8, 8],
  329,
  8,
  330,
  c,
  [172, 55],
  112,
  331,
  c,
  [28, 7],
  337,
  320,
  338,
  73,
  c,
  [88, 9],
  337,
  c,
  [127, 28],
  8,
  358,
  c,
  [108, 56],
  359,
  c,
  [630, 15],
  8,
  372,
  c,
  [74, 56],
  c,
  [140, 9],
  374,
  c,
  [1703, 44],
  c,
  [1711, 27],
  c,
  [82, 9],
  c,
  [28, 28]
]),
  mode: u([
  2,
  s,
  [1, 31],
  s,
  [2, 8],
  s,
  [1, 32],
  c,
  [40, 9],
  s,
  [2, 9],
  c,
  [10, 10],
  c,
  [63, 5],
  c,
  [14, 14],
  c,
  [56, 17],
  c,
  [47, 4],
  c,
  [15, 14],
  1,
  c,
  [66, 14],
  s,
  [2, 22],
  s,
  [1, 54],
  c,
  [66, 13],
  c,
  [11, 12],
  c,
  [116, 51],
  c,
  [26, 16],
  c,
  [237, 15],
  c,
  [35, 10],
  c,
  [138, 33],
  c,
  [257, 15],
  c,
  [190, 35],
  c,
  [64, 16],
  c,
  [206, 6],
  c,
  [68, 12],
  c,
  [304, 70],
  s,
  [1, 138],
  c,
  [200, 49],
  c,
  [341, 7],
  c,
  [5, 4],
  c,
  [4, 11],
  s,
  [1, 289],
  c,
  [568, 23],
  c,
  [605, 8],
  c,
  [806, 18],
  c,
  [79, 46],
  s,
  [2, 68],
  c,
  [458, 15],
  c,
  [57, 57],
  c,
  [163, 91],
  c,
  [148, 44],
  c,
  [447, 86],
  c,
  [1351, 93],
  s,
  [1, 356],
  c,
  [704, 22],
  c,
  [451, 41],
  c,
  [474, 45],
  c,
  [1926, 9],
  c,
  [133, 22],
  c,
  [7, 14],
  c,
  [1855, 15],
  c,
  [1048, 7],
  c,
  [1794, 9],
  c,
  [306, 134],
  c,
  [1538, 10],
  c,
  [1940, 22],
  c,
  [23, 70],
  c,
  [1988, 25],
  c,
  [26, 140],
  c,
  [1250, 28],
  c,
  [28, 46],
  c,
  [574, 29],
  c,
  [82, 28],
  c,
  [31, 31],
  c,
  [1162, 45],
  c,
  [684, 25],
  c,
  [593, 85],
  c,
  [30, 28],
  c,
  [77, 76],
  c,
  [58, 29],
  s,
  [1, 270]
]),
  goto: u([
  7,
  10,
  53,
  14,
  24,
  36,
  44,
  s,
  [61, 4, 1],
  6,
  9,
  33,
  32,
  30,
  27,
  59,
  60,
  58,
  54,
  s,
  [46, 5, 1],
  65,
  10,
  67,
  68,
  6,
  9,
  s,
  [8, 5],
  162,
  8,
  8,
  53,
  70,
  71,
  c,
  [38, 6],
  c,
  [36, 13],
  72,
  75,
  76,
  77,
  74,
  s,
  [78, 5, 1],
  s,
  [148, 8],
  83,
  148,
  148,
  s,
  [106, 7],
  84,
  s,
  [106, 12],
  86,
  87,
  s,
  [106, 12],
  s,
  [88, 11, 1],
  s,
  [145, 9],
  99,
  145,
  145,
  100,
  102,
  101,
  s,
  [105, 9],
  106,
  105,
  104,
  s,
  [105, 36],
  53,
  71,
  110,
  c,
  [151, 6],
  115,
  108,
  154,
  133,
  129,
  134,
  109,
  138,
  30,
  119,
  59,
  60,
  141,
  135,
  54,
  148,
  146,
  147,
  49,
  50,
  s,
  [121, 8, 1],
  130,
  131,
  132,
  136,
  137,
  139,
  140,
  s,
  [142, 4, 1],
  s,
  [149, 5, 1],
  155,
  s,
  [143, 12],
  156,
  143,
  s,
  [86, 9],
  106,
  86,
  158,
  86,
  159,
  s,
  [86, 34],
  53,
  c,
  [266, 3],
  c,
  [262, 4],
  c,
  [259, 6],
  s,
  [141, 12],
  s,
  [162, 4, 1],
  141,
  141,
  136,
  166,
  167,
  s,
  [136, 10],
  171,
  168,
  169,
  170,
  s,
  [136, 6],
  c,
  [55, 4],
  c,
  [321, 17],
  s,
  [129, 14],
  173,
  174,
  175,
  s,
  [129, 9],
  c,
  [408, 6],
  176,
  c,
  [409, 19],
  s,
  [125, 10],
  179,
  180,
  s,
  [125, 16],
  181,
  s,
  [122, 3],
  183,
  s,
  [122, 9],
  182,
  184,
  s,
  [122, 16],
  c,
  [133, 21],
  c,
  [21, 127],
  14,
  c,
  [43, 29],
  108,
  109,
  c,
  [23, 12],
  s,
  [9, 5],
  162,
  9,
  9,
  110,
  195,
  c,
  [495, 4],
  199,
  198,
  200,
  135,
  203,
  201,
  202,
  c,
  [490, 27],
  204,
  40,
  40,
  211,
  212,
  210,
  c,
  [5, 6],
  c,
  [4, 11],
  218,
  c,
  [62, 11],
  c,
  [60, 25],
  c,
  [237, 84],
  c,
  [121, 79],
  c,
  [79, 40],
  228,
  c,
  [59, 18],
  102,
  231,
  101,
  232,
  233,
  234,
  c,
  [86, 21],
  237,
  236,
  238,
  s,
  [57, 6],
  96,
  s,
  [57, 9],
  240,
  c,
  [105, 6],
  57,
  57,
  200,
  s,
  [57, 5],
  135,
  s,
  [57, 17],
  c,
  [391, 30],
  s,
  [167, 6],
  78,
  s,
  [167, 35],
  s,
  [166, 6],
  79,
  s,
  [166, 35],
  53,
  71,
  192,
  c,
  [904, 12],
  s,
  [56, 6],
  195,
  s,
  [56, 35],
  53,
  71,
  198,
  c,
  [245, 19],
  s,
  [170, 6],
  203,
  s,
  [170, 35],
  s,
  [171, 6],
  204,
  s,
  [171, 35],
  s,
  [169, 6],
  205,
  s,
  [169, 35],
  c,
  [499, 79],
  c,
  [1235, 52],
  c,
  [1047, 144],
  c,
  [21, 62],
  102,
  255,
  101,
  c,
  [87, 64],
  c,
  [1778, 4],
  259,
  c,
  [23, 17],
  10,
  261,
  68,
  260,
  6,
  9,
  c,
  [200, 105],
  s,
  [106, 19],
  c,
  [1868, 14],
  s,
  [10, 5],
  162,
  10,
  10,
  c,
  [1953, 22],
  96,
  c,
  [953, 7],
  c,
  [1320, 32],
  268,
  269,
  c,
  [1302, 3],
  s,
  [44, 3],
  271,
  44,
  44,
  272,
  273,
  275,
  274,
  c,
  [13, 3],
  276,
  c,
  [4, 3],
  277,
  c,
  [4, 3],
  278,
  c,
  [4, 3],
  s,
  [94, 6],
  106,
  s,
  [94, 5],
  162,
  280,
  162,
  s,
  [144, 12],
  156,
  144,
  s,
  [92, 6],
  106,
  s,
  [92, 5],
  102,
  282,
  101,
  284,
  283,
  102,
  102,
  162,
  c,
  [118, 12],
  c,
  [1255, 46],
  287,
  102,
  288,
  101,
  289,
  c,
  [1501, 39],
  c,
  [65, 21],
  292,
  s,
  [142, 12],
  c,
  [1937, 4],
  142,
  142,
  102,
  293,
  101,
  137,
  166,
  167,
  s,
  [137, 10],
  c,
  [1940, 4],
  s,
  [137, 6],
  138,
  166,
  167,
  s,
  [138, 10],
  c,
  [23, 4],
  s,
  [138, 6],
  139,
  166,
  167,
  s,
  [139, 10],
  c,
  [23, 4],
  s,
  [139, 6],
  140,
  166,
  167,
  s,
  [140, 10],
  c,
  [23, 4],
  s,
  [140, 6],
  s,
  [130, 14],
  c,
  [1988, 3],
  s,
  [130, 9],
  s,
  [131, 14],
  c,
  [26, 3],
  s,
  [131, 9],
  s,
  [132, 14],
  c,
  [26, 3],
  s,
  [132, 9],
  s,
  [133, 14],
  c,
  [26, 3],
  s,
  [133, 9],
  s,
  [134, 14],
  c,
  [26, 3],
  s,
  [134, 9],
  s,
  [135, 14],
  c,
  [26, 3],
  s,
  [135, 9],
  s,
  [126, 10],
  179,
  180,
  s,
  [126, 16],
  s,
  [127, 10],
  179,
  180,
  s,
  [127, 16],
  s,
  [128, 10],
  179,
  180,
  s,
  [128, 16],
  c,
  [1969, 5],
  294,
  c,
  [377, 17],
  s,
  [123, 3],
  183,
  s,
  [123, 9],
  182,
  184,
  s,
  [123, 16],
  s,
  [124, 3],
  183,
  s,
  [124, 9],
  182,
  184,
  s,
  [124, 16],
  s,
  [11, 5],
  162,
  11,
  11,
  296,
  299,
  298,
  c,
  [573, 37],
  s,
  [48, 3],
  301,
  48,
  48,
  302,
  303,
  c,
  [2750, 24],
  c,
  [2775, 25],
  306,
  307,
  c,
  [893, 42],
  310,
  102,
  311,
  101,
  313,
  312,
  74,
  74,
  162,
  314,
  316,
  c,
  [863, 5],
  317,
  c,
  [34, 17],
  299,
  319,
  51,
  c,
  [58, 21],
  321,
  299,
  323,
  324,
  c,
  [2844, 9],
  325,
  c,
  [2889, 4],
  326,
  c,
  [5, 4],
  327,
  328,
  103,
  103,
  162,
  c,
  [156, 26],
  c,
  [75, 21],
  332,
  333,
  334,
  299,
  336,
  335,
  c,
  [105, 3],
  339,
  340,
  c,
  [82, 9],
  341,
  c,
  [10, 9],
  342,
  343,
  344,
  10,
  67,
  345,
  6,
  9,
  102,
  346,
  101,
  347,
  348,
  349,
  299,
  336,
  s,
  [350, 6, 1],
  c,
  [2366, 10],
  356,
  357,
  c,
  [2368, 13],
  c,
  [123, 46],
  s,
  [360, 8, 1],
  10,
  67,
  368,
  c,
  [98, 3],
  369,
  101,
  370,
  371,
  c,
  [64, 34],
  108,
  373,
  c,
  [113, 38],
  10,
  67,
  375,
  6,
  9,
  376,
  10,
  67,
  377,
  c,
  [1357, 11],
  108,
  378,
  c,
  [60, 13],
  379,
  c,
  [25, 10],
  380,
  c,
  [25, 13],
  s,
  [381, 4, 1]
])
}),
defaultActions: bda({
  idx: u([
  3,
  6,
  7,
  8,
  11,
  s,
  [14, 6, 1],
  22,
  29,
  30,
  s,
  [32, 4, 1],
  37,
  s,
  [39, 5, 1],
  s,
  [46, 5, 1],
  s,
  [53, 5, 1],
  65,
  66,
  70,
  s,
  [78, 5, 1],
  s,
  [86, 13, 1],
  103,
  110,
  112,
  113,
  116,
  s,
  [120, 18, 1],
  139,
  140,
  s,
  [142, 4, 1],
  s,
  [149, 7, 1],
  157,
  160,
  176,
  181,
  185,
  s,
  [187, 6, 1],
  s,
  [196, 9, 1],
  s,
  [206, 4, 1],
  s,
  [218, 4, 1],
  225,
  227,
  228,
  231,
  236,
  240,
  243,
  244,
  255,
  259,
  260,
  264,
  265,
  266,
  268,
  270,
  279,
  281,
  282,
  283,
  288,
  289,
  290,
  293,
  294,
  296,
  297,
  302,
  308,
  316,
  317,
  s,
  [319, 4, 1],
  335,
  336,
  337,
  344,
  350,
  351,
  360,
  s,
  [362, 4, 1],
  370,
  371,
  379,
  383,
  384
]),
  goto: u([
  5,
  12,
  13,
  14,
  147,
  67,
  s,
  [26, 5, 1],
  104,
  81,
  82,
  s,
  [56, 4, 1],
  61,
  s,
  [164, 10, 1],
  175,
  176,
  118,
  109,
  110,
  1,
  6,
  68,
  s,
  [21, 5, 1],
  107,
  108,
  s,
  [151, 11, 1],
  89,
  69,
  162,
  72,
  77,
  97,
  s,
  [177, 15, 1],
  193,
  194,
  196,
  197,
  s,
  [199, 4, 1],
  s,
  [206, 7, 1],
  88,
  87,
  62,
  174,
  s,
  [111, 7, 1],
  78,
  79,
  192,
  195,
  198,
  203,
  204,
  205,
  15,
  38,
  41,
  42,
  43,
  98,
  99,
  149,
  150,
  163,
  91,
  100,
  31,
  70,
  96,
  84,
  85,
  60,
  63,
  64,
  119,
  120,
  121,
  16,
  39,
  95,
  93,
  90,
  101,
  37,
  71,
  73,
  83,
  65,
  17,
  45,
  18,
  146,
  80,
  66,
  52,
  53,
  47,
  49,
  46,
  54,
  55,
  32,
  50,
  19,
  75,
  20,
  2,
  3,
  4,
  76,
  33,
  35,
  34,
  36
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        this.trace(str);
        hash.destroy();             // destroy... well, *almost*!
    } else {
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = new Array(128),         // token stack: stores token which leads to state at the same index (column storage)
        sstack = new Array(128),        // state stack: stores states (column storage)

        vstack = new Array(128),        // semantic value stack
        lstack = new Array(128),        // location stack
        table = this.table,
        sp = 0;                         // 'stack pointer': index into the stacks

    var TERROR = this.TERROR,
        EOF = this.EOF,
        ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, table.length /* ensures that anyone using this new state will fail dramatically! */];

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: null,
        quoteName: null,
        lexer: null,
        parser: null,
        pre_parse: null,
        post_parse: null
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState_yy[k] = this.yy[k];
      }
    }

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    lexer.setInput(input, sharedState_yy);

    var yyloc = lexer.yylloc || {};
    lstack[sp] = yyloc;
    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;


    var yylineno = lexer.yylineno;


    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            return sharedState_yy.parseError(str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = sharedState_yy.quoteName;
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.parseError = undefined;
            sharedState_yy.quoteName = undefined;
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;
        }

        return resultValue;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc || {},
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };


    function lex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token || EOF;
    }


    var symbol = 0;

    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p, len, this_production;
    var lstack_begin, lstack_end;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];




                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (lexer.showPosition) {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    retval = this.parseError(p.errStr, p, this.JisonParserError);
                    break;
                }


            }









            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo(('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol), null, null, false);
                    retval = this.parseError(p.errStr, p, this.JisonParserError);
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                retval = this.parseError(p.errStr, p, this.JisonParserError);
                break;

            // shift:
            case 1:
                //this.shiftCount++;
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;
                lstack[sp] = lexer.yylloc || {};
                sstack[sp] = newState; // push state
                ++sp;
                symbol = 0;

                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:


                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc || {};











                continue;

            // reduce:
            case 2:
                //this.reductionCount++;
                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                len = this_production[1];
                lstack_end = sp;
                lstack_begin = lstack_end - (len || 1);
                lstack_end--;



                // Make sure subsequent `$$ = $1` default action doesn't fail
                // for rules where len==0 as then there's no $1 (you're reducing an epsilon rule then!)
                //
                // Also do this to prevent nasty action block codes to *read* `$0` or `$$`
                // and *not* get `undefined` as a result for their efforts!
                vstack[sp] = undefined;

                // perform semantic action
                yyval.$ = vstack[sp - len]; // default to $$ = $1; result must produce `undefined` when len == 0, as then there's no $1

                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }

                r = this.performAction.call(yyval, yylineno, yyloc, newState, sp - 1, vstack, lstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= len;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;
                lstack[sp] = yyval._$;
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;

                continue;

            // accept:
            case 3:
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                if (typeof yyval.$ !== 'undefined') {
                    retval = yyval.$;
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too:
        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = this.parseError(p.errStr, p, this.JisonParserError);
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;

/*global parser*/
/* eslint-disable no-unused-vars */
function SourceLocation(source, start, end) {
  this.source = source
  this.start = start
  this.end = end
}

function Position(line, column) {
  this.line = line
  this.column = column
}

function createSourceLocation(firstToken, lastToken) {
  return new SourceLocation(
    parser.source, // Some sort of magic. In this way we can pass filemane into jison generated parser.
    new Position(firstToken.first_line, firstToken.first_column),
    new Position(lastToken.last_line, lastToken.last_column)
  )
}

function parseRegularExpressionLiteral(literal) {
  const last = literal.lastIndexOf('/')
  const body = literal.substring(1, last)
  const flags = literal.substring(last + 1)

  return new RegExp(body, flags)
}

function parseNumericLiteral(literal) {
  if (literal.charAt(0) === '0') {
    if (literal.charAt(1).toLowerCase() === 'x') {
      return parseInt(literal, 16)
    } else {
      return parseInt(literal, 8)
    }
  } else {
    return Number(literal)
  }
}

/* Begin Parser Customization Methods */
const originalParseMethod = parser.parse

parser.parse = function (source, code) {
  parser.source = source
  return originalParseMethod.call(this, code)
}
/* End Parser Customization Methods */
/* eslint-disable no-unused-vars */
function ComponentNode(body, loc) {
  this.type = 'ComponentNode'
  this.body = body
  this.loc = loc
}

function TemplateNode(attributes, body, loc) {
  this.type = 'TemplateNode'
  this.attributes = attributes
  this.body = body
  this.loc = loc
}

function ScriptNode(attributes, body, loc) {
  this.type = 'ScriptNode'
  this.attributes = attributes
  this.body = body
  this.loc = loc
}

function StyleNode(attributes, body, loc) {
  this.type = 'StyleNode'
  this.attributes = attributes
  this.body = body
  this.loc = loc
}

function TextNode(text, loc) {
  this.type = 'Text'
  this.text = text
  this.loc = loc
}

function CommentNode(comment, loc) {
  this.type = 'Comment'
  this.comment = comment
  this.loc = loc
}

function ElementNode(name, attributes, body, loc) {
  this.type = 'Element'
  this.name = name
  this.attributes = attributes
  this.body = body
  this.loc = loc
}

function AttributeNode(name, body, loc) {
  this.type = 'Attribute'
  this.name = name
  this.body = body
  this.loc = loc
}

function SpreadAttributeNode(identifier, loc) {
  this.type = 'SpreadAttribute'
  this.identifier = identifier
  this.loc = loc
}

function DirectiveNode(name, body, loc) {
  this.type = 'Directive'
  this.name = name
  this.body = body
  this.loc = loc
}

function ExpressionStatementNode(expression, loc) {
  this.type = 'ExpressionStatement'
  this.expression = expression
  this.loc = loc
}

function ImportStatementNode(identifier, path, loc) {
  this.type = 'ImportStatement'
  this.identifier = identifier
  this.path = path
  this.loc = loc
}

function IfStatementNode(cond, then, otherwise, loc) {
  this.type = 'IfStatement'
  this.cond = cond
  this.then = then
  this.otherwise = otherwise
  this.loc = loc
}

function EachStatementNode(expr, body, options, loc) {
  this.type = 'EachStatement'
  this.expr = expr
  this.body = body
  this.options = options
  this.loc = loc
}

function UnsafeStatementNode(html, loc) {
  this.type = 'UnsafeStatement'
  this.html = html
  this.loc = loc
}

function FilterExpressionNode(callee, args, loc) {
  this.type = 'FilterExpression'
  this.callee = callee
  this.arguments = args
  this.loc = loc
}

function ThisExpressionNode(loc) {
  this.type = 'ThisExpression'
  this.loc = loc
}

function ArrayExpressionNode(elements, loc) {
  this.type = 'ArrayExpression'
  this.elements = elements
  this.loc = loc
}

function ObjectExpressionNode(properties, loc) {
  this.type = 'ObjectExpression'
  this.properties = properties
  this.loc = loc
}

function SequenceExpressionNode(expressions, loc) {
  this.type = 'SequenceExpression'
  this.expressions = expressions
  this.loc = loc
}

function UnaryExpressionNode(operator, prefix, argument, loc) {
  this.type = 'UnaryExpression'
  this.operator = operator
  this.prefix = prefix
  this.argument = argument
  this.loc = loc
}

function BinaryExpressionNode(operator, left, right, loc) {
  this.type = 'BinaryExpression'
  this.operator = operator
  this.left = left
  this.right = right
  this.loc = loc
}

function AssignmentExpressionNode(operator, left, right, loc) {
  this.type = 'AssignmentExpression'
  this.operator = operator
  this.left = left
  this.right = right
  this.loc = loc
}

function UpdateExpressionNode(operator, argument, prefix, loc) {
  this.type = 'UpdateExpression'
  this.operator = operator
  this.argument = argument
  this.prefix = prefix
  this.loc = loc
}

function LogicalExpressionNode(operator, left, right, loc) {
  this.type = 'LogicalExpression'
  this.operator = operator
  this.left = left
  this.right = right
  this.loc = loc
}

function ConditionalExpressionNode(test, consequent, alternate, loc) {
  this.type = 'ConditionalExpression'
  this.test = test
  this.consequent = consequent
  this.alternate = alternate
  this.loc = loc
}

function NewExpressionNode(callee, args, loc) {
  this.type = 'NewExpression'
  this.callee = callee
  this.arguments = args
  this.loc = loc
}

function CallExpressionNode(callee, args, loc) {
  this.type = 'CallExpression'
  this.callee = callee
  this.arguments = args
  this.loc = loc
}

function MemberExpressionNode(object, property, computed, loc) {
  this.type = 'MemberExpression'
  this.object = object
  this.property = property
  this.computed = computed
  this.loc = loc
}

function IdentifierNode(name, loc) {
  this.type = 'Identifier'
  this.name = name
  this.loc = loc
}

function AccessorNode(name, loc) {
  this.type = 'Accessor'
  this.name = name
  this.loc = loc
}

function LiteralNode(value, loc) {
  this.type = 'Literal'
  this.value = value
  this.loc = loc
}

const ast = {
  ComponentNode,
  TemplateNode,
  ScriptNode,
  StyleNode,
  TextNode,
  CommentNode,
  ElementNode,
  AttributeNode,
  SpreadAttributeNode,
  DirectiveNode,
  ExpressionStatementNode,
  ImportStatementNode,
  IfStatementNode,
  EachStatementNode,
  UnsafeStatementNode,
  FilterExpressionNode,
  ThisExpressionNode,
  ArrayExpressionNode,
  ObjectExpressionNode,
  SequenceExpressionNode,
  UnaryExpressionNode,
  BinaryExpressionNode,
  AssignmentExpressionNode,
  UpdateExpressionNode,
  LogicalExpressionNode,
  ConditionalExpressionNode,
  NewExpressionNode,
  CallExpressionNode,
  MemberExpressionNode,
  IdentifierNode,
  AccessorNode,
  LiteralNode,
}
/* lexer generated by jison-lex 0.3.4-166 */
/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Lexer.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `lexer.lex(...)` and specified by way of `%parse-param ...` in the **parser** grammar file
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *               - `yy_`     : lexer instance reference used internally.
 *
 *               - `$avoiding_name_collisions`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file and which are passed to the lexer via
 *                             its `lexer.lex(...)` API.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function([args...]),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **parser** grammar:
 *               these extra `args...` are passed verbatim to the lexer rules' action code.
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *               This helper API is invoked when the parse process has completed. This helper may
 *               be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = (function () {
// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonLexerError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
} else {
    JisonLexerError.prototype = Object.create(Error.prototype);
}
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';




var lexer = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //   backtracking:        false
    //   location.ranges:     undefined
    //
    // Forwarded Parser Analysis flags:
    //   uses yyleng:         false
    //   uses yylineno:       true
    //   uses yytext:         false
    //   uses yylloc:         false
    //   uses lexer values:   true / true
    //   location tracking:   true
    //   location assignment: false
    //
    // --------- END OF REPORT -----------


    EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        // <-- injected by the code generator

    // options: {},                             // <-- injected by the code generator

    // yy: ...,                                 // <-- injected by setInput()

    __currentRuleSet__: null,                   // <-- internal rule set cache for the current lexer state

    __error_infos: [],                          // INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup

    __decompressed: false,                      // INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use

    done: false,                                // INTERNAL USE ONLY
    _backtrack: false,                          // INTERNAL USE ONLY
    _input: '',                                 // INTERNAL USE ONLY
    _more: false,                               // INTERNAL USE ONLY
    _signaled_error_token: false,               // INTERNAL USE ONLY

    conditionStack: [],                         // INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`

    match: '',                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
    matched: '',                                // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
    matches: false,                             // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
    yytext: '',                                 // ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
    offset: 0,                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
    yyleng: 0,                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
    yylineno: 0,                                // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
    yylloc: null,                               // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction

    // INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
    /**
    @public
    @this {RegExpLexer}
    */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable) {
        /** @constructor */
        var pei = {
            errStr: msg,
            recoverable: !!recoverable,
            text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
            token: null,
            line: this.yylineno,
            loc: this.yylloc,
            yy: this.yy,
            lexer: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            /**
            @public
            @this {LexErrorInfo}
            */
            destroy: function destructLexErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    },

    /**
    @public
    @this {RegExpLexer}
    */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
            return this.yy.parseError(str, hash, ExceptionClass) || this.ERROR;
        } else {
            throw new ExceptionClass(str, hash);
        }
    },

    // final cleanup function for when we have completed lexing the input;
    // make it an API so that external code can use this one once userland
    // code has decided it's time to destroy any lingering lexer error
    // hash object instances and the like: this function helps to clean
    // up these constructs, which *may* carry cyclic references which would
    // otherwise prevent the instances from being properly and timely
    // garbage-collected, i.e. this function helps prevent memory leaks!
    /**
    @public
    @this {RegExpLexer}
    */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
        var rv;

        // prevent lingering circular references from causing memory leaks:
        this.setInput('', {});

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;
        }

        return this;
    },

    // clear the lexer token context; intended for internal use only
    /**
    @public
    @this {RegExpLexer}
    */
    clear: function lexer_clear() {
        this.yytext = '';
        this.yyleng = 0;
        this.match = '';
        this.matches = false;
        this._more = false;
        this._backtrack = false;
    },

    // resets the lexer, sets new input
    /**
    @public
    @this {RegExpLexer}
    */
    setInput: function lexer_setInput(input, yy) {
        this.yy = yy || this.yy || {};

        // also check if we've fully initialized the lexer instance,
        // including expansion work to be done to go from a loaded
        // lexer to a usable lexer:
        if (!this.__decompressed) {
          // step 1: decompress the regex list:
          var rules = this.rules;
          for (var i = 0, len = rules.length; i < len; i++) {
            var rule_re = rules[i];

            // compression: is the RE an xref to another RE slot in the rules[] table?
            if (typeof rule_re === 'number') {
              rules[i] = rules[rule_re];
            }
          }

          // step 2: unfold the conditions[] set to make these ready for use:
          var conditions = this.conditions;
          for (var k in conditions) {
            var spec = conditions[k];

            var rule_ids = spec.rules;

            var len = rule_ids.length;
            var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
            var rule_new_ids = new Array(len + 1);

            for (var i = 0; i < len; i++) {
              var idx = rule_ids[i];
              var rule_re = rules[idx];
              rule_regexes[i + 1] = rule_re;
              rule_new_ids[i + 1] = idx;
            }

            spec.rules = rule_new_ids;
            spec.__rule_regexes = rule_regexes;
            spec.__rule_count = len;
          }

          this.__decompressed = true;
        }

        this._input = input || '';
        this.clear();
        this._signaled_error_token = false;
        this.done = false;
        this.yylineno = 0;
        this.matched = '';
        this.conditionStack = ['INITIAL'];
        this.__currentRuleSet__ = null;
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

    // consumes and returns one char from the input
    /**
    @public
    @this {RegExpLexer}
    */
    input: function lexer_input() {
        if (!this._input) {
            //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

    // unshifts one char (or a string) into the input
    /**
    @public
    @this {RegExpLexer}
    */
    unput: function lexer_unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

    // When called from action, caches matched text and appends it on next action
    /**
    @public
    @this {RegExpLexer}
    */
    more: function lexer_more() {
        this._more = true;
        return this;
    },

    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    /**
    @public
    @this {RegExpLexer}
    */
    reject: function lexer_reject() {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the `parseError()` call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // `.lex()` run.
            var p = this.constructLexErrorInfo('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), false);
            this._signaled_error_token = (this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR);
        }
        return this;
    },

    // retain first n characters of the match
    /**
    @public
    @this {RegExpLexer}
    */
    less: function lexer_less(n) {
        return this.unput(this.match.slice(n));
    },

    // return (part of the) already matched input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    /**
    @public
    @this {RegExpLexer}
    */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
        var past = this.matched.substring(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = past.length;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substr` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        past = past.substr(-maxSize * 2 - 2);
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = past.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(-maxLines);
        past = a.join('\n');
        // When, after limiting to maxLines, we still have too much to return,
        // do add an ellipsis prefix...
        if (past.length > maxSize) {
            past = '...' + past.substr(-maxSize);
        }
        return past;
    },

    // return (part of the) upcoming input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    /**
    @public
    @this {RegExpLexer}
    */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = maxSize;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substring` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        if (next.length < maxSize * 2 + 2) {
            next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8
        }
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = next.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(0, maxLines);
        next = a.join('\n');
        // When, after limiting to maxLines, we still have too much to return,
        // do add an ellipsis postfix...
        if (next.length > maxSize) {
            next = next.substring(0, maxSize) + '...';
        }
        return next;
    },

    // return a string which displays the character position where the lexing error occurred, i.e. for error messages
    /**
    @public
    @this {RegExpLexer}
    */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
        var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    // helper function, used to produce a human readable description as a string, given
    // the input `yylloc` location object.
    // Set `display_range_too` to TRUE to include the string character index position(s)
    // in the description if the `yylloc.range` is available.
    /**
    @public
    @this {RegExpLexer}
    */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
        var l1 = yylloc.first_line;
        var l2 = yylloc.last_line;
        var o1 = yylloc.first_column;
        var o2 = yylloc.last_column - 1;
        var dl = l2 - l1;
        var d_o = (dl === 0 ? o2 - o1 : 1000);
        var rv;
        if (dl === 0) {
            rv = 'line ' + l1 + ', ';
            if (d_o === 0) {
                rv += 'column ' + o1;
            } else {
                rv += 'columns ' + o1 + ' .. ' + o2;
            }
        } else {
            rv = 'lines ' + l1 + '(column ' + o1 + ') .. ' + l2 + '(column ' + o2 + ')';
        }
        if (yylloc.range && display_range_too) {
            var r1 = yylloc.range[0];
            var r2 = yylloc.range[1] - 1;
            if (r2 === r1) {
                rv += ' {String Offset: ' + r1 + '}';
            } else {
                rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
        }
        return rv;
        // return JSON.stringify(yylloc);
    },

    // test the lexed token: return FALSE when not a match, otherwise return token.
    //
    // `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
    // contains the actually matched text string.
    //
    // Also move the input cursor forward and update the match collectors:
    // - yytext
    // - yyleng
    // - match
    // - matches
    // - yylloc
    // - offset
    /**
    @public
    @this {RegExpLexer}
    */
    test_match: function lexer_test_match(match, indexed_rule) {
        var token,
            lines,
            backup,
            match_str,
            match_str_len;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        match_str = match[0];
        match_str_len = match_str.length;
        // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
            lines = match_str.match(/(?:\r\n?|\n).*/g);
            if (lines) {
                this.yylineno += lines.length;
            }
        // }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/^\r?\n?/)[0].length :
                         this.yylloc.last_column + match_str_len
        };
        this.yytext += match_str;
        this.match += match_str;
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        // previous lex rules MAY have invoked the `more()` API rather than producing a token:
        // those rules will already have moved this `offset` forward matching their match lengths,
        // hence we must only add our own match length now:
        this.offset += match_str_len;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match_str_len);
        this.matched += match_str;

        // calling this method:
        //
        //   function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {...}
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1] /* = YY_START */);
        // otherwise, when the action codes are all simple return token statements:
        //token = this.simpleCaseActionClusters[indexed_rule];

        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            this.__currentRuleSet__ = null;
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as `.parseError()` in `reject()` did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

    // return next match in input
    /**
    @public
    @this {RegExpLexer}
    */
    next: function lexer_next() {
        if (this.done) {
            this.clear();
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.clear();
        }
        var spec = this.__currentRuleSet__;
        if (!spec) {
            // Update the ruleset cache as we apparently encountered a state change or just started lexing.
            // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
            // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
            // speed up those activities a tiny bit.
            spec = this.__currentRuleSet__ = this._currentRules();
            // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
            // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
            if (!spec || !spec.rules) {
                var p = this.constructLexErrorInfo('Internal lexer engine error on line ' + (this.yylineno + 1) + '. The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!\n', false);
                // produce one 'error' token until this situation has been resolved, most probably by parse termination!
                return (this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR);
            }
        }

        var rule_ids = spec.rules;
        //var dispatch = spec.__dispatch_lut;
        var regexes = spec.__rule_regexes;
        var len = spec.__rule_count;

        //var c0 = this._input[0];

        // Note: the arrays are 1-based, while `len` itself is a valid index,
        // hence the non-standard less-or-equal check in the next loop condition!
        //
        // `dispatch` is a lookup table which lists the *first* rule which matches the 1-char *prefix* of the rule-to-match.
        // By using that array as a jumpstart, we can cut down on the otherwise O(n*m) behaviour of this lexer, down to
        // O(n) ideally, where:
        //
        // - N is the number of input particles -- which is not precisely characters
        //   as we progress on a per-regex-match basis rather than on a per-character basis
        //
        // - M is the number of rules (regexes) to test in the active condition state.
        //
        for (var i = 1 /* (dispatch[c0] || 1) */ ; i <= len; i++) {
            tempMatch = this._input.match(regexes[i]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rule_ids[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = undefined;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rule_ids[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            this.done = true;
            return this.EOF;
        } else {
            var p = this.constructLexErrorInfo('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), this.options.lexer_errors_are_recoverable);
            token = (this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR);
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
                // by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

    // return next match that has a token
    /**
    @public
    @this {RegExpLexer}
    */
    lex: function lexer_lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

    // backwards compatible alias for `pushState()`;
    // the latter is symmetrical with `popState()` and we advise to use
    // those APIs in any modern lexer code, rather than `begin()`.
    /**
    @public
    @this {RegExpLexer}
    */
    begin: function lexer_begin(condition) {
        return this.pushState(condition);
    },

    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    /**
    @public
    @this {RegExpLexer}
    */
    pushState: function lexer_pushState(condition) {
        this.conditionStack.push(condition);
        this.__currentRuleSet__ = null;
        return this;
    },

    // pop the previously active lexer condition state off the condition stack
    /**
    @public
    @this {RegExpLexer}
    */
    popState: function lexer_popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            this.__currentRuleSet__ = null;
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    /**
    @public
    @this {RegExpLexer}
    */
    topState: function lexer_topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

    // (internal) determine the lexer rule set which is active for the currently active lexer condition state
    /**
    @public
    @this {RegExpLexer}
    */
    _currentRules: function lexer__currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
        } else {
            return this.conditions['INITIAL'];
        }
    },

    // return the number of states currently on the stack
    /**
    @public
    @this {RegExpLexer}
    */
    stateStackSize: function lexer_stateStackSize() {
        return this.conditionStack.length;
    },
    options: {
  flex: true
},
    JisonLexerError: JisonLexerError,
    performAction: function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 0 :
/*! Conditions:: INITIAL */
/*! Rule::       <script */
 this.begin("script"); return '<script'
break;
case 1 :
/*! Conditions:: INITIAL */
/*! Rule::       <style */
 this.begin("style"); return '<style'
break;
case 2 :
/*! Conditions:: INITIAL */
/*! Rule::       \/\/ */
 this.begin("comment"); return '//';
break;
case 3 :
/*! Conditions:: INITIAL */
/*! Rule::       \/\* */
 this.begin("comment"); return '/*';
break;
case 4 :
/*! Conditions:: INITIAL */
/*! Rule::       <!-- */
 this.begin("comment"); return 30;
break;
case 5 :
/*! Conditions:: INITIAL */
/*! Rule::       < */
 this.begin("html"); return 3;
break;
case 6 :
/*! Conditions:: INITIAL */
/*! Rule::       \{ */
 this.begin("expr"); return 7;
break;
case 8 :
/*! Conditions:: html */
/*! Rule::       > */
 this.popState(); return 4;
break;
case 16 :
/*! Conditions:: html */
/*! Rule::       \s+ */
 /* skip whitespaces */
break;
case 19 :
/*! Conditions:: html */
/*! Rule::       \{ */
 this.begin("expr"); return 7;
break;
case 20 :
/*! Conditions:: html */
/*! Rule::       ("|') */
 this.begin("attr"); return 48;
break;
case 22 :
/*! Conditions:: attr */
/*! Rule::       \{ */
 this.begin("expr"); return 7;
break;
case 24 :
/*! Conditions:: attr */
/*! Rule::       ("|') */
 this.popState(); return 48;
break;
case 25 :
/*! Conditions:: regexp */
/*! Rule::       {RegularExpressionLiteral} */
 this.popState(); return 85;
break;
case 26 :
/*! Conditions:: expr */
/*! Rule::       \} */
 this.popState(); return 8;
break;
case 27 :
/*! Conditions:: expr */
/*! Rule::       \s+ */
 /* skip whitespaces */
break;
case 28 :
/*! Conditions:: expr */
/*! Rule::       \/\*(.|\r|\n)*?\*\/ */
 /* skip comments */
break;
case 29 :
/*! Conditions:: expr */
/*! Rule::       \/\/.*($|\r\n|\r|\n) */
 /* skip comments */
break;
case 99 :
/*! Conditions:: script */
/*! Rule::       > */
 this.begin('js'); return 4;
break;
case 100 :
/*! Conditions:: style */
/*! Rule::       > */
 this.begin('css'); return 4;
break;
case 101 :
/*! Conditions:: js */
/*! Rule::       ([\s\S]+)(?:<\/script>) */
 this.popState(); return 26;
break;
case 102 :
/*! Conditions:: css */
/*! Rule::       ([\s\S]+)(?:<\/style>) */
 this.popState(); return 28;
break;
case 103 :
/*! Conditions:: script */
/*! Rule::       <\/script> */
 this.popState(); return '</script>';
break;
case 104 :
/*! Conditions:: style */
/*! Rule::       <\/style> */
 this.popState(); return '</style>';
break;
case 105 :
/*! Conditions:: comment */
/*! Rule::       --> */
 this.popState(); return 32;
break;
case 106 :
/*! Conditions:: comment */
/*! Rule::       \/\/ */
 this.popState(); return '//';
break;
case 107 :
/*! Conditions:: comment */
/*! Rule::       \*\/ */
 this.popState(); return '*/';
break;
case 110 :
/*! Conditions:: INITIAL */
/*! Rule::       . */
 console.log(yy_.yytext); /* `flex` lexing mode: the last resort rule! */
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
    simpleCaseActionClusters: {

  /*! Conditions:: INITIAL */
  /*! Rule::       {Text} */
   7 : 29,
  /*! Conditions:: html */
  /*! Rule::       input */
   9 : 34,
  /*! Conditions:: html */
  /*! Rule::       br */
   10 : 35,
  /*! Conditions:: html */
  /*! Rule::       hr */
   11 : 36,
  /*! Conditions:: html */
  /*! Rule::       link */
   12 : 37,
  /*! Conditions:: html */
  /*! Rule::       meta */
   13 : 38,
  /*! Conditions:: html */
  /*! Rule::       template */
   14 : 24,
  /*! Conditions:: html */
  /*! Rule::       ([\w-]+) */
   15 : 33,
  /*! Conditions:: html */
  /*! Rule::       : */
   17 : 10,
  /*! Conditions:: html */
  /*! Rule::       = */
   18 : 9,
  /*! Conditions:: html */
  /*! Rule::       \/ */
   21 : 5,
  /*! Conditions:: attr */
  /*! Rule::       {AttributeText} */
   23 : 29,
  /*! Conditions:: expr */
  /*! Rule::       {StringLiteral} */
   30 : 84,
  /*! Conditions:: expr */
  /*! Rule::       import */
   31 : 40,
  /*! Conditions:: expr */
  /*! Rule::       from */
   32 : 41,
  /*! Conditions:: expr */
  /*! Rule::       if */
   33 : 42,
  /*! Conditions:: expr */
  /*! Rule::       else */
   34 : 44,
  /*! Conditions:: expr */
  /*! Rule::       each */
   35 : 45,
  /*! Conditions:: expr */
  /*! Rule::       of */
   36 : 'OF',
  /*! Conditions:: expr */
  /*! Rule::       in */
   37 : 46,
  /*! Conditions:: expr */
  /*! Rule::       instanceof */
   38 : 62,
  /*! Conditions:: expr */
  /*! Rule::       true */
   39 : 81,
  /*! Conditions:: expr */
  /*! Rule::       false */
   40 : 82,
  /*! Conditions:: expr */
  /*! Rule::       null */
   41 : 80,
  /*! Conditions:: expr */
  /*! Rule::       this */
   42 : 50,
  /*! Conditions:: expr */
  /*! Rule::       = */
   43 : 47,
  /*! Conditions:: expr */
  /*! Rule::       # */
   44 : 39,
  /*! Conditions:: expr */
  /*! Rule::       \/ */
   45 : 43,
  /*! Conditions:: expr */
  /*! Rule::       {Identifier} */
   46 : 33,
  /*! Conditions:: expr */
  /*! Rule::       {DecimalLiteral} */
   47 : 83,
  /*! Conditions:: expr */
  /*! Rule::       {HexIntegerLiteral} */
   48 : 83,
  /*! Conditions:: expr */
  /*! Rule::       {OctalIntegerLiteral} */
   49 : 83,
  /*! Conditions:: expr */
  /*! Rule::       \\\{ */
   50 : 7,
  /*! Conditions:: expr */
  /*! Rule::       \} */
   51 : 8,
  /*! Conditions:: expr */
  /*! Rule::       \( */
   52 : 11,
  /*! Conditions:: expr */
  /*! Rule::       \) */
   53 : 12,
  /*! Conditions:: expr */
  /*! Rule::       \[ */
   54 : 13,
  /*! Conditions:: expr */
  /*! Rule::       \] */
   55 : 14,
  /*! Conditions:: expr */
  /*! Rule::       \. */
   56 : 15,
  /*! Conditions:: expr */
  /*! Rule::       ; */
   57 : ';',
  /*! Conditions:: expr */
  /*! Rule::       , */
   58 : 6,
  /*! Conditions:: expr */
  /*! Rule::       \? */
   59 : 23,
  /*! Conditions:: expr */
  /*! Rule::       : */
   60 : 10,
  /*! Conditions:: expr */
  /*! Rule::       === */
   61 : 65,
  /*! Conditions:: expr */
  /*! Rule::       == */
   62 : 63,
  /*! Conditions:: expr */
  /*! Rule::       = */
   63 : 9,
  /*! Conditions:: expr */
  /*! Rule::       !== */
   64 : 66,
  /*! Conditions:: expr */
  /*! Rule::       != */
   65 : 64,
  /*! Conditions:: expr */
  /*! Rule::       ! */
   66 : 20,
  /*! Conditions:: expr */
  /*! Rule::       <<= */
   67 : 74,
  /*! Conditions:: expr */
  /*! Rule::       << */
   68 : 57,
  /*! Conditions:: expr */
  /*! Rule::       <= */
   69 : 60,
  /*! Conditions:: expr */
  /*! Rule::       < */
   70 : 3,
  /*! Conditions:: expr */
  /*! Rule::       >>>= */
   71 : 76,
  /*! Conditions:: expr */
  /*! Rule::       >>> */
   72 : 59,
  /*! Conditions:: expr */
  /*! Rule::       >>= */
   73 : 75,
  /*! Conditions:: expr */
  /*! Rule::       >> */
   74 : 58,
  /*! Conditions:: expr */
  /*! Rule::       >= */
   75 : 61,
  /*! Conditions:: expr */
  /*! Rule::       > */
   76 : 4,
  /*! Conditions:: expr */
  /*! Rule::       \+= */
   77 : 72,
  /*! Conditions:: expr */
  /*! Rule::       \+\+ */
   78 : 54,
  /*! Conditions:: expr */
  /*! Rule::       \+ */
   79 : 17,
  /*! Conditions:: expr */
  /*! Rule::       -= */
   80 : 73,
  /*! Conditions:: expr */
  /*! Rule::       -- */
   81 : 55,
  /*! Conditions:: expr */
  /*! Rule::       - */
   82 : 18,
  /*! Conditions:: expr */
  /*! Rule::       \*= */
   83 : 69,
  /*! Conditions:: expr */
  /*! Rule::       \* */
   84 : 21,
  /*! Conditions:: expr */
  /*! Rule::       \/= */
   85 : 70,
  /*! Conditions:: expr */
  /*! Rule::       \/ */
   86 : 5,
  /*! Conditions:: expr */
  /*! Rule::       %= */
   87 : 71,
  /*! Conditions:: expr */
  /*! Rule::       % */
   88 : 22,
  /*! Conditions:: expr */
  /*! Rule::       && */
   89 : 67,
  /*! Conditions:: expr */
  /*! Rule::       &= */
   90 : 77,
  /*! Conditions:: expr */
  /*! Rule::       & */
   91 : '&',
  /*! Conditions:: expr */
  /*! Rule::       \|\| */
   92 : 68,
  /*! Conditions:: expr */
  /*! Rule::       \|= */
   93 : 79,
  /*! Conditions:: expr */
  /*! Rule::       \| */
   94 : 16,
  /*! Conditions:: expr */
  /*! Rule::       \^= */
   95 : 78,
  /*! Conditions:: expr */
  /*! Rule::       \^ */
   96 : '^',
  /*! Conditions:: expr */
  /*! Rule::       ~ */
   97 : 19,
  /*! Conditions:: expr */
  /*! Rule::       \.\.\. */
   98 : 49,
  /*! Conditions:: comment */
  /*! Rule::       ((?!-->).)* */
   108 : 31,
  /*! Conditions:: INITIAL */
  /*! Rule::       $ */
   109 : 1
},
    rules: [
/^(?:<script)/,
/^(?:<style)/,
/^(?:\/\/)/,
/^(?:\/\*)/,
/^(?:<!--)/,
/^(?:<)/,
/^(?:\{)/,
/^(?:([^<{]+))/,
/^(?:>)/,
/^(?:input)/,
/^(?:br)/,
/^(?:hr)/,
/^(?:link)/,
/^(?:meta)/,
/^(?:template)/,
/^(?:([\w-]+))/,
/^(?:\s+)/,
/^(?::)/,
/^(?:=)/,
/^(?:\{)/,
/^(?:("|'))/,
/^(?:\/)/,
/^(?:\{)/,
/^(?:([^"'{|]+))/,
/^(?:("|'))/,
/^(?:((?:(?:([^\n\r*\/\[\\])|(?:\\(?:[^\n\r]))|(?:\[(?:[^\n\r\\\]]|(?:\\(?:[^\n\r])))*\]))(?:([^\n\r\/\[\\])|(?:\\(?:[^\n\r]))|(?:\[(?:[^\n\r\\\]]|(?:\\(?:[^\n\r])))*\]))*)\/(?:(?:(?:(?:[^\u0000-©«-´¶-¹»-¿×÷˂-˅˒-˟˥-˫˭˯-ͯ͵͸͹;-΅·΋΍΢϶҂-҉Ԩ-԰՗՘՚-ՠֈ-׏׫-ׯ׳-؟ً-٭ٰ۔ۖ-ۤۧ-ۭ۰-۹۽۾܀-܏ܑܰ-݌ަ-ް޲-߉߫-߳߶-߹߻-߿ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࠿࡙-࢟ࢡࢭ-ःऺ-़ा-ॏ॑-ॗॢ-॰ॸঀ-঄঍঎঑঒঩঱঳-঵঺-়া-্৏-৛৞ৢ-৯৲-਄਋-਎਑਒਩਱਴਷਺-੘੝੟-ੱੵ-઄઎઒઩઱઴઺-઼ા-૏૑-૟ૢ-଄଍଎଑଒଩଱଴଺-଼ା-୛୞ୢ-୰୲-ஂ஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-௏௑-ఄ఍఑఩ఴ఺-఼ా-౗ౚ-౟ౢ-಄಍಑಩಴಺-಼ಾ-ೝ೟ೢ-೰ೳ-ഄ഍഑഻഼ാ-്൏-ൟൢ-൹඀-඄඗-඙඲඼඾඿෇-฀ัิ-฿็-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬັິ-ຼ຾຿໅໇-໛໠-໿༁-༿཈཭-྇ྍ-࿿ါ-ှ၀-၏ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-႟჆჈-჌჎჏჻቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛-፿᎐-᎟Ᏽ-᐀᙭᙮ ᚛-᚟᛫-᛭ᛱ-᛿ᜍᜒ-ᜟᜲ-᜿ᝒ-᝟᝭᝱-᝿឴-៖៘-៛៝-᠟ᡸ-᡿ᢩ᢫-᢯᣶-᣿ᤝ-᥏᥮᥯᥵-᥿᦬-ᧀᧈ-᧿ᨗ-᨟ᩕ-᪦᪨-ᬄ᬴-᭄ᭌ-ᮂᮡ-ᮭ᮰-᮹᯦-᯿ᰤ-᱌᱐-᱙᱾-᳨᳭ᳲ-᳴᳷-᳿᷀-᷿἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵᾽᾿-῁῅῍-῏῔῕῜-῟῭-῱῵´-⁰⁲-⁾₀-₏₝-℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏-⅟↉-⯿Ⱟⱟ⳥-⳪⳯-⳱⳴-⳿⴦⴨-⴬⴮⴯⵨-⵮⵰-⵿⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟-⸮⸰-〄〈-〠〪-〰〶〷〽-぀゗-゜゠・㄀-㄄ㄮ-㄰㆏-㆟ㆻ-㇯㈀-㏿䶶-䷿鿍-鿿꒍-꓏꓾꓿꘍-꘏꘠-꘩꘬-꘿꙯-꙾Ꚙ-ꚟ꛰-꜖꜠꜡꞉꞊ꞏꞔ-ꞟꞫ-ꟷꠂ꠆ꠋꠣ-꠿꡴-ꢁꢴ-꣱꣸-꣺꣼-꤉ꤦ-꤯ꥇ-꥟꥽-ꦃ꦳-꧎꧐-꧿ꨩ-꨿ꩃꩌ-꩟꩷-꩹ꩻ-ꩿꪰꪲ-ꪴꪷꪸꪾ꪿꫁꫃-꫚꫞꫟ꫫ-꫱ꫵ-꬀꬇꬈꬏꬐꬗-꬟꬧꬯-ꮿꯣ-꯿힤-힯퟇-퟊퟼-﩮﩯﫚-﫿﬇-﬒﬘-﬜ﬞ﬩﬷﬽﬿﭂﭅﮲-﯒﴾-﵏﶐﶑﷈-﷯﷼-﹯﹵﻽-＠［-｀｛-･﾿-￁￈￉￐￑￘￙￝-\uffff])|[$A-Z_a-z]|(\\[u](?:[\dA-Fa-f]){4}))|(?:[^\u0000-\/:-©«-´¶-¹»-¿×÷˂-˅˒-˟˥-˫˭˯-˿͵͸͹;-΅·΋΍΢϶҂҈҉Ԩ-԰՗՘՚-ՠֈ-֐־׀׃׆׈-׏׫-ׯ׳-؏؛-؟٪-٭۔۝۞۩۽۾܀-܏݋݌޲-޿߶-߹߻-߿࠮-࠿࡜-࢟ࢡࢭ-ࣣࣿ।॥॰ॸঀ঄঍঎঑঒঩঱঳-঵঺঻৅৆৉৊৏-৖৘-৛৞৤৥৲-਀਄਋-਎਑਒਩਱਴਷਺਻਽੃-੆੉੊੎-੐੒-੘੝੟-੥੶-઀઄઎઒઩઱઴઺઻૆૊૎૏૑-૟૤૥૰-଀଄଍଎଑଒଩଱଴଺଻୅୆୉୊୎-୕୘-୛୞୤୥୰୲-஁஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-஽௃-௅௉௎௏௑-௖௘-௥௰-ఀఄ఍఑఩ఴ఺-఼౅౉౎-౔౗ౚ-౟౤౥౰-ಁ಄಍಑಩಴಺಻೅೉೎-೔೗-ೝ೟೤೥೰ೳ-ഁഄ഍഑഻഼൅൉൏-ൖ൘-ൟ൤൥൰-൹඀ඁ඄඗-඙඲඼඾඿෇-෉෋-෎෕෗෠-෱෴-฀฻-฿๏๚-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬ຺຾຿໅໇໎໏໚໛໠-໿༁-༗༚-༟༪-༴༶༸༺-༽཈཭-཰྅྘྽-࿅࿇-࿿၊-၏႞႟჆჈-჌჎჏჻቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛፜፠-፿᎐-᎟Ᏽ-᐀᙭᙮ ᚛-᚟᛫-᛭ᛱ-᛿ᜍ᜕-ᜟ᜵-᜿᝔-᝟᝭᝱᝴-᝿។-៖៘-៛៞៟៪-᠊᠎᠏᠚-᠟ᡸ-᡿᢫-᢯᣶-᣿ᤝ-᤟᤬-᤯᤼-᥅᥮᥯᥵-᥿᦬-᦯᧊-᧏᧚-᧿᨜-᨟᩟᩽᩾᪊-᪏᪚-᪦᪨-᫿ᭌ-᭏᭚-᭪᭴-᭿᯴-᯿᰸-᰿᱊-᱌᱾-᳏᳓᳷-᳿ᷧ-᷻἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵᾽᾿-῁῅῍-῏῔῕῜-῟῭-῱῵´-​‎-‾⁁-⁓⁕-⁰⁲-⁾₀-₏₝-⃏⃝-⃠⃢-⃤⃱-℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏-⅟↉-⯿Ⱟⱟ⳥-⳪⳴-⳿⴦⴨-⴬⴮⴯⵨-⵮⵰-⵾⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟⸀-⸮⸰-〄〈-〠〰〶〷〽-぀゗゘゛゜゠・㄀-㄄ㄮ-㄰㆏-㆟ㆻ-㇯㈀-㏿䶶-䷿鿍-鿿꒍-꓏꓾꓿꘍-꘏꘬-꘿꙰-꙳꙾Ꚙ-ꚞ꛲-꜖꜠꜡꞉꞊ꞏꞔ-ꞟꞫ-ꟷ꠨-꠿꡴-꡿ꣅ-꣏꣚-꣟꣸-꣺꣼-ꣿ꤮꤯꥔-꥟꥽-꥿꧁-꧎꧚-꧿꨷-꨿꩎꩏꩚-꩟꩷-꩹ꩼ-ꩿ꫃-꫚꫞꫟꫰꫱꫷-꬀꬇꬈꬏꬐꬗-꬟꬧꬯-ꮿ꯫꯮꯯꯺-꯿힤-힯퟇-퟊퟼-﩮﩯﫚-﫿﬇-﬒﬘-﬜﬩﬷﬽﬿﭂﭅﮲-﯒﴾-﵏﶐﶑﷈-﷯﷼-﷿︐-︟︧-︲︵-﹌﹐-﹯﹵﻽-／：-＠［-＾｀｛-･﾿-￁￈￉￐￑￘￙￝-\uffff])|\d)*)))/,
/^(?:\})/,
/^(?:\s+)/,
/^(?:\/\*(.|\r|\n)*?\*\/)/,
/^(?:\/\/.*($|\r\n|\r|\n))/,
/^(?:(("(?:([^\n\r"\\]+)|(\\(?:(?:(?:["'\\bfnrtv])|(?:[^\d"'\\bfnrt-vx]))|(?:(?:[1-7][0-7]{0,2}|[0-7]{2,3}))|(?:[x](?:[\dA-Fa-f]){2})|(?:[u](?:[\dA-Fa-f]){4})))|(?:\\(\r\n|\r|\n)))*")|('(?:([^\n\r'\\]+)|(\\(?:(?:(?:["'\\bfnrtv])|(?:[^\d"'\\bfnrt-vx]))|(?:(?:[1-7][0-7]{0,2}|[0-7]{2,3}))|(?:[x](?:[\dA-Fa-f]){2})|(?:[u](?:[\dA-Fa-f]){4})))|(?:\\(\r\n|\r|\n)))*')))/,
/^(?:import)/,
/^(?:from)/,
/^(?:if)/,
/^(?:else)/,
/^(?:each)/,
/^(?:of)/,
/^(?:in)/,
/^(?:instanceof)/,
/^(?:true)/,
/^(?:false)/,
/^(?:null)/,
/^(?:this)/,
/^(?:=)/,
/^(?:#)/,
/^(?:\/)/,
/^(?:((?:(?:[^\u0000-©«-´¶-¹»-¿×÷˂-˅˒-˟˥-˫˭˯-ͯ͵͸͹;-΅·΋΍΢϶҂-҉Ԩ-԰՗՘՚-ՠֈ-׏׫-ׯ׳-؟ً-٭ٰ۔ۖ-ۤۧ-ۭ۰-۹۽۾܀-܏ܑܰ-݌ަ-ް޲-߉߫-߳߶-߹߻-߿ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࠿࡙-࢟ࢡࢭ-ःऺ-़ा-ॏ॑-ॗॢ-॰ॸঀ-঄঍঎঑঒঩঱঳-঵঺-়া-্৏-৛৞ৢ-৯৲-਄਋-਎਑਒਩਱਴਷਺-੘੝੟-ੱੵ-઄઎઒઩઱઴઺-઼ા-૏૑-૟ૢ-଄଍଎଑଒଩଱଴଺-଼ା-୛୞ୢ-୰୲-ஂ஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-௏௑-ఄ఍఑఩ఴ఺-఼ా-౗ౚ-౟ౢ-಄಍಑಩಴಺-಼ಾ-ೝ೟ೢ-೰ೳ-ഄ഍഑഻഼ാ-്൏-ൟൢ-൹඀-඄඗-඙඲඼඾඿෇-฀ัิ-฿็-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬັິ-ຼ຾຿໅໇-໛໠-໿༁-༿཈཭-྇ྍ-࿿ါ-ှ၀-၏ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-႟჆჈-჌჎჏჻቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛-፿᎐-᎟Ᏽ-᐀᙭᙮ ᚛-᚟᛫-᛭ᛱ-᛿ᜍᜒ-ᜟᜲ-᜿ᝒ-᝟᝭᝱-᝿឴-៖៘-៛៝-᠟ᡸ-᡿ᢩ᢫-᢯᣶-᣿ᤝ-᥏᥮᥯᥵-᥿᦬-ᧀᧈ-᧿ᨗ-᨟ᩕ-᪦᪨-ᬄ᬴-᭄ᭌ-ᮂᮡ-ᮭ᮰-᮹᯦-᯿ᰤ-᱌᱐-᱙᱾-᳨᳭ᳲ-᳴᳷-᳿᷀-᷿἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵᾽᾿-῁῅῍-῏῔῕῜-῟῭-῱῵´-⁰⁲-⁾₀-₏₝-℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏-⅟↉-⯿Ⱟⱟ⳥-⳪⳯-⳱⳴-⳿⴦⴨-⴬⴮⴯⵨-⵮⵰-⵿⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟-⸮⸰-〄〈-〠〪-〰〶〷〽-぀゗-゜゠・㄀-㄄ㄮ-㄰㆏-㆟ㆻ-㇯㈀-㏿䶶-䷿鿍-鿿꒍-꓏꓾꓿꘍-꘏꘠-꘩꘬-꘿꙯-꙾Ꚙ-ꚟ꛰-꜖꜠꜡꞉꞊ꞏꞔ-ꞟꞫ-ꟷꠂ꠆ꠋꠣ-꠿꡴-ꢁꢴ-꣱꣸-꣺꣼-꤉ꤦ-꤯ꥇ-꥟꥽-ꦃ꦳-꧎꧐-꧿ꨩ-꨿ꩃꩌ-꩟꩷-꩹ꩻ-ꩿꪰꪲ-ꪴꪷꪸꪾ꪿꫁꫃-꫚꫞꫟ꫫ-꫱ꫵ-꬀꬇꬈꬏꬐꬗-꬟꬧꬯-ꮿꯣ-꯿힤-힯퟇-퟊퟼-﩮﩯﫚-﫿﬇-﬒﬘-﬜ﬞ﬩﬷﬽﬿﭂﭅﮲-﯒﴾-﵏﶐﶑﷈-﷯﷼-﹯﹵﻽-＠［-｀｛-･﾿-￁￈￉￐￑￘￙￝-\uffff])|[$A-Z_a-z]|(\\[u](?:[\dA-Fa-f]){4}))(?:(?:(?:[^\u0000-©«-´¶-¹»-¿×÷˂-˅˒-˟˥-˫˭˯-ͯ͵͸͹;-΅·΋΍΢϶҂-҉Ԩ-԰՗՘՚-ՠֈ-׏׫-ׯ׳-؟ً-٭ٰ۔ۖ-ۤۧ-ۭ۰-۹۽۾܀-܏ܑܰ-݌ަ-ް޲-߉߫-߳߶-߹߻-߿ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࠿࡙-࢟ࢡࢭ-ःऺ-़ा-ॏ॑-ॗॢ-॰ॸঀ-঄঍঎঑঒঩঱঳-঵঺-়া-্৏-৛৞ৢ-৯৲-਄਋-਎਑਒਩਱਴਷਺-੘੝੟-ੱੵ-઄઎઒઩઱઴઺-઼ા-૏૑-૟ૢ-଄଍଎଑଒଩଱଴଺-଼ା-୛୞ୢ-୰୲-ஂ஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-௏௑-ఄ఍఑఩ఴ఺-఼ా-౗ౚ-౟ౢ-಄಍಑಩಴಺-಼ಾ-ೝ೟ೢ-೰ೳ-ഄ഍഑഻഼ാ-്൏-ൟൢ-൹඀-඄඗-඙඲඼඾඿෇-฀ัิ-฿็-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬັິ-ຼ຾຿໅໇-໛໠-໿༁-༿཈཭-྇ྍ-࿿ါ-ှ၀-၏ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-႟჆჈-჌჎჏჻቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛-፿᎐-᎟Ᏽ-᐀᙭᙮ ᚛-᚟᛫-᛭ᛱ-᛿ᜍᜒ-ᜟᜲ-᜿ᝒ-᝟᝭᝱-᝿឴-៖៘-៛៝-᠟ᡸ-᡿ᢩ᢫-᢯᣶-᣿ᤝ-᥏᥮᥯᥵-᥿᦬-ᧀᧈ-᧿ᨗ-᨟ᩕ-᪦᪨-ᬄ᬴-᭄ᭌ-ᮂᮡ-ᮭ᮰-᮹᯦-᯿ᰤ-᱌᱐-᱙᱾-᳨᳭ᳲ-᳴᳷-᳿᷀-᷿἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵᾽᾿-῁῅῍-῏῔῕῜-῟῭-῱῵´-⁰⁲-⁾₀-₏₝-℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏-⅟↉-⯿Ⱟⱟ⳥-⳪⳯-⳱⳴-⳿⴦⴨-⴬⴮⴯⵨-⵮⵰-⵿⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟-⸮⸰-〄〈-〠〪-〰〶〷〽-぀゗-゜゠・㄀-㄄ㄮ-㄰㆏-㆟ㆻ-㇯㈀-㏿䶶-䷿鿍-鿿꒍-꓏꓾꓿꘍-꘏꘠-꘩꘬-꘿꙯-꙾Ꚙ-ꚟ꛰-꜖꜠꜡꞉꞊ꞏꞔ-ꞟꞫ-ꟷꠂ꠆ꠋꠣ-꠿꡴-ꢁꢴ-꣱꣸-꣺꣼-꤉ꤦ-꤯ꥇ-꥟꥽-ꦃ꦳-꧎꧐-꧿ꨩ-꨿ꩃꩌ-꩟꩷-꩹ꩻ-ꩿꪰꪲ-ꪴꪷꪸꪾ꪿꫁꫃-꫚꫞꫟ꫫ-꫱ꫵ-꬀꬇꬈꬏꬐꬗-꬟꬧꬯-ꮿꯣ-꯿힤-힯퟇-퟊퟼-﩮﩯﫚-﫿﬇-﬒﬘-﬜ﬞ﬩﬷﬽﬿﭂﭅﮲-﯒﴾-﵏﶐﶑﷈-﷯﷼-﹯﹵﻽-＠［-｀｛-･﾿-￁￈￉￐￑￘￙￝-\uffff])|[$A-Z_a-z]|(\\[u](?:[\dA-Fa-f]){4}))|(?:[^\u0000-\/:-©«-´¶-¹»-¿×÷˂-˅˒-˟˥-˫˭˯-˿͵͸͹;-΅·΋΍΢϶҂҈҉Ԩ-԰՗՘՚-ՠֈ-֐־׀׃׆׈-׏׫-ׯ׳-؏؛-؟٪-٭۔۝۞۩۽۾܀-܏݋݌޲-޿߶-߹߻-߿࠮-࠿࡜-࢟ࢡࢭ-ࣣࣿ।॥॰ॸঀ঄঍঎঑঒঩঱঳-঵঺঻৅৆৉৊৏-৖৘-৛৞৤৥৲-਀਄਋-਎਑਒਩਱਴਷਺਻਽੃-੆੉੊੎-੐੒-੘੝੟-੥੶-઀઄઎઒઩઱઴઺઻૆૊૎૏૑-૟૤૥૰-଀଄଍଎଑଒଩଱଴଺଻୅୆୉୊୎-୕୘-୛୞୤୥୰୲-஁஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-஽௃-௅௉௎௏௑-௖௘-௥௰-ఀఄ఍఑఩ఴ఺-఼౅౉౎-౔౗ౚ-౟౤౥౰-ಁ಄಍಑಩಴಺಻೅೉೎-೔೗-ೝ೟೤೥೰ೳ-ഁഄ഍഑഻഼൅൉൏-ൖ൘-ൟ൤൥൰-൹඀ඁ඄඗-඙඲඼඾඿෇-෉෋-෎෕෗෠-෱෴-฀฻-฿๏๚-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬ຺຾຿໅໇໎໏໚໛໠-໿༁-༗༚-༟༪-༴༶༸༺-༽཈཭-཰྅྘྽-࿅࿇-࿿၊-၏႞႟჆჈-჌჎჏჻቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛፜፠-፿᎐-᎟Ᏽ-᐀᙭᙮ ᚛-᚟᛫-᛭ᛱ-᛿ᜍ᜕-ᜟ᜵-᜿᝔-᝟᝭᝱᝴-᝿។-៖៘-៛៞៟៪-᠊᠎᠏᠚-᠟ᡸ-᡿᢫-᢯᣶-᣿ᤝ-᤟᤬-᤯᤼-᥅᥮᥯᥵-᥿᦬-᦯᧊-᧏᧚-᧿᨜-᨟᩟᩽᩾᪊-᪏᪚-᪦᪨-᫿ᭌ-᭏᭚-᭪᭴-᭿᯴-᯿᰸-᰿᱊-᱌᱾-᳏᳓᳷-᳿ᷧ-᷻἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵᾽᾿-῁῅῍-῏῔῕῜-῟῭-῱῵´-​‎-‾⁁-⁓⁕-⁰⁲-⁾₀-₏₝-⃏⃝-⃠⃢-⃤⃱-℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏-⅟↉-⯿Ⱟⱟ⳥-⳪⳴-⳿⴦⴨-⴬⴮⴯⵨-⵮⵰-⵾⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟⸀-⸮⸰-〄〈-〠〰〶〷〽-぀゗゘゛゜゠・㄀-㄄ㄮ-㄰㆏-㆟ㆻ-㇯㈀-㏿䶶-䷿鿍-鿿꒍-꓏꓾꓿꘍-꘏꘬-꘿꙰-꙳꙾Ꚙ-ꚞ꛲-꜖꜠꜡꞉꞊ꞏꞔ-ꞟꞫ-ꟷ꠨-꠿꡴-꡿ꣅ-꣏꣚-꣟꣸-꣺꣼-ꣿ꤮꤯꥔-꥟꥽-꥿꧁-꧎꧚-꧿꨷-꨿꩎꩏꩚-꩟꩷-꩹ꩼ-ꩿ꫃-꫚꫞꫟꫰꫱꫷-꬀꬇꬈꬏꬐꬗-꬟꬧꬯-ꮿ꯫꯮꯯꯺-꯿힤-힯퟇-퟊퟼-﩮﩯﫚-﫿﬇-﬒﬘-﬜﬩﬷﬽﬿﭂﭅﮲-﯒﴾-﵏﶐﶑﷈-﷯﷼-﷿︐-︟︧-︲︵-﹌﹐-﹯﹵﻽-／：-＠［-＾｀｛-･﾿-￁￈￉￐￑￘￙￝-\uffff])|\d)*))/,
/^(?:(((?:[0]|((?:[1-9])(?:\d+)*))\.(?:\d+)*(?:(?:[Ee])(?:[+-]?\d+))?)|(\.(?:\d+)(?:(?:[Ee])(?:[+-]?\d+))?)|((?:[0]|((?:[1-9])(?:\d+)*))(?:(?:[Ee])(?:[+-]?\d+))?)))/,
/^(?:([0][Xx](?:[\dA-Fa-f])+))/,
/^(?:([0](?:[0-7])+))/,
/^(?:\\\{)/,
/^(?:\})/,
/^(?:\()/,
/^(?:\))/,
/^(?:\[)/,
/^(?:\])/,
/^(?:\.)/,
/^(?:;)/,
/^(?:,)/,
/^(?:\?)/,
/^(?::)/,
/^(?:===)/,
/^(?:==)/,
/^(?:=)/,
/^(?:!==)/,
/^(?:!=)/,
/^(?:!)/,
/^(?:<<=)/,
/^(?:<<)/,
/^(?:<=)/,
/^(?:<)/,
/^(?:>>>=)/,
/^(?:>>>)/,
/^(?:>>=)/,
/^(?:>>)/,
/^(?:>=)/,
/^(?:>)/,
/^(?:\+=)/,
/^(?:\+\+)/,
/^(?:\+)/,
/^(?:-=)/,
/^(?:--)/,
/^(?:-)/,
/^(?:\*=)/,
/^(?:\*)/,
/^(?:\/=)/,
/^(?:\/)/,
/^(?:%=)/,
/^(?:%)/,
/^(?:&&)/,
/^(?:&=)/,
/^(?:&)/,
/^(?:\|\|)/,
/^(?:\|=)/,
/^(?:\|)/,
/^(?:\^=)/,
/^(?:\^)/,
/^(?:~)/,
/^(?:\.\.\.)/,
/^(?:>)/,
/^(?:>)/,
/^(?:([\s\S]+)(?:<\/script>))/,
/^(?:([\s\S]+)(?:<\/style>))/,
/^(?:<\/script>)/,
/^(?:<\/style>)/,
/^(?:-->)/,
/^(?:\/\/)/,
/^(?:\*\/)/,
/^(?:((?!-->).)*)/,
/^(?:$)/,
/^(?:.)/
],
    conditions: {
  "comment": {
    rules: [
      105,
      106,
      107,
      108
    ],
    inclusive: false
  },
  "expr": {
    rules: [
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98
    ],
    inclusive: false
  },
  "regexp": {
    rules: [
      25
    ],
    inclusive: false
  },
  "style": {
    rules: [
      100,
      104
    ],
    inclusive: false
  },
  "script": {
    rules: [
      99,
      103
    ],
    inclusive: false
  },
  "css": {
    rules: [
      102
    ],
    inclusive: false
  },
  "js": {
    rules: [
      101
    ],
    inclusive: false
  },
  "attr": {
    rules: [
      22,
      23,
      24
    ],
    inclusive: false
  },
  "html": {
    rules: [
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21
    ],
    inclusive: false
  },
  "INITIAL": {
    rules: [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      109,
      110
    ],
    inclusive: true
  }
}
};




return lexer;
})();
parser.lexer = lexer;

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();
